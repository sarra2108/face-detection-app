{"ast":null,"code":"var _jsxFileName = \"/Users/sarrasassi/my-app/face-recognition-brain-2/src/components/ParticlesBackground.js\",\n  _s = $RefreshSig$();\nimport Particles, { initParticlesEngine } from \"@tsparticles/react\";\nimport { useEffect, useMemo, useState } from \"react\";\n// import { loadAll } from \"@/tsparticles/all\"; // if you are going to use `loadAll`, install the \"@tsparticles/all\" package too.\n// import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too.\nimport { loadSlim } from \"@tsparticles/slim\"; // if you are going to use `loadSlim`, install the \"@tsparticles/slim\" package too.\n// import { loadBasic } from \"@tsparticles/basic\"; // if you are going to use `loadBasic`, install the \"@tsparticles/basic\" package too.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParticlesComponent = props => {\n  _s();\n  const [init, setInit] = useState(false);\n  // this should be run only once per application lifetime\n  useEffect(() => {\n    initParticlesEngine(async engine => {\n      // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n      // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n      // starting from v2 you can add only the features you need reducing the bundle size\n      //await loadAll(engine);\n      //await loadFull(engine);\n      await loadSlim(engine);\n      //await loadBasic(engine);\n    }).then(() => {\n      setInit(true);\n    });\n  }, []);\n  const particlesLoaded = container => {\n    console.log(container);\n  };\n  const options = useMemo(() => ({\n    particles: {\n      number: {\n        value: 400,\n        density: {\n          enable: true,\n          value_area: 800\n        }\n      },\n      color: {\n        value: '#fff'\n      },\n      shape: {\n        type: 'circle',\n        stroke: {\n          width: 0,\n          color: '#ff0000'\n        },\n        polygon: {\n          nb_sides: 5\n        },\n        image: {\n          src: '',\n          width: 100,\n          height: 100\n        }\n      },\n      opacity: {\n        value: 1,\n        random: false,\n        anim: {\n          enable: false,\n          speed: 2,\n          opacity_min: 0,\n          sync: false\n        }\n      },\n      size: {\n        value: 20,\n        random: false,\n        anim: {\n          enable: false,\n          speed: 20,\n          size_min: 0,\n          sync: false\n        }\n      },\n      line_linked: {\n        enable: true,\n        distance: 100,\n        color: '#fff',\n        opacity: 1,\n        width: 1\n      },\n      move: {\n        enable: true,\n        speed: 2,\n        direction: 'none',\n        random: false,\n        straight: false,\n        out_mode: 'out',\n        bounce: false,\n        attract: {\n          enable: false,\n          rotateX: 3000,\n          rotateY: 3000\n        }\n      },\n      array: []\n    },\n    interactivity: {\n      detect_on: 'canvas',\n      events: {\n        onhover: {\n          enable: true,\n          mode: 'grab'\n        },\n        onclick: {\n          enable: true,\n          mode: 'push'\n        },\n        resize: true\n      },\n      modes: {\n        grab: {\n          distance: 100,\n          line_linked: {\n            opacity: 1\n          }\n        },\n        bubble: {\n          distance: 200,\n          size: 80,\n          duration: 0.4\n        },\n        repulse: {\n          distance: 200,\n          duration: 0.4\n        },\n        push: {\n          particles_nb: 4\n        },\n        remove: {\n          particles_nb: 2\n        }\n      },\n      mouse: {}\n    },\n    detectRetina: true\n  }), []);\n  return /*#__PURE__*/_jsxDEV(Particles, {\n    id: props.id,\n    init: particlesLoaded,\n    options: options\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 10\n  }, this);\n};\n_s(ParticlesComponent, \"eB+NWpxmGZSqHQDaTSx/Qv0E/5M=\");\n_c = ParticlesComponent;\nexport default ParticlesComponent;\nvar _c;\n$RefreshReg$(_c, \"ParticlesComponent\");","map":{"version":3,"names":["Particles","initParticlesEngine","useEffect","useMemo","useState","loadSlim","jsxDEV","_jsxDEV","ParticlesComponent","props","_s","init","setInit","engine","then","particlesLoaded","container","console","log","options","particles","number","value","density","enable","value_area","color","shape","type","stroke","width","polygon","nb_sides","image","src","height","opacity","random","anim","speed","opacity_min","sync","size","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","array","interactivity","detect_on","events","onhover","mode","onclick","resize","modes","grab","bubble","duration","repulse","push","particles_nb","remove","mouse","detectRetina","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sarrasassi/my-app/face-recognition-brain-2/src/components/ParticlesBackground.js"],"sourcesContent":["import Particles, { initParticlesEngine } from \"@tsparticles/react\";\nimport { useEffect, useMemo, useState } from \"react\";\n// import { loadAll } from \"@/tsparticles/all\"; // if you are going to use `loadAll`, install the \"@tsparticles/all\" package too.\n// import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too.\nimport { loadSlim } from \"@tsparticles/slim\"; // if you are going to use `loadSlim`, install the \"@tsparticles/slim\" package too.\n// import { loadBasic } from \"@tsparticles/basic\"; // if you are going to use `loadBasic`, install the \"@tsparticles/basic\" package too.\n\n\n\nconst ParticlesComponent = (props) => {\n\n  const [init, setInit] = useState(false);\n  // this should be run only once per application lifetime\n  useEffect(() => {\n    initParticlesEngine(async (engine) => {\n      // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n      // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n      // starting from v2 you can add only the features you need reducing the bundle size\n      //await loadAll(engine);\n      //await loadFull(engine);\n      await loadSlim(engine);\n      //await loadBasic(engine);\n    }).then(() => {\n      setInit(true);\n    });\n  }, []);\n\n  const particlesLoaded = (container) => {\n    console.log(container);\n  };\n\n\n  const options = useMemo(\n    () => ({\n        particles: {\n            number: {\n              value: 400,\n              density: {\n                enable: true,\n                value_area: 800\n              }\n            },\n            color: {\n              value: '#fff'\n            },\n            shape: {\n              type: 'circle',\n              stroke: {\n                width: 0,\n                color: '#ff0000'\n              },\n              polygon: {\n                nb_sides: 5\n              },\n              image: {\n                src: '',\n                width: 100,\n                height: 100\n              }\n            },\n            opacity: {\n              value: 1,\n              random: false,\n              anim: {\n                enable: false,\n                speed: 2,\n                opacity_min: 0,\n                sync: false\n              }\n            },\n            size: {\n              value: 20,\n              random: false,\n              anim: {\n                enable: false,\n                speed: 20,\n                size_min: 0,\n                sync: false\n              }\n            },\n            line_linked: {\n              enable: true,\n              distance: 100,\n              color: '#fff',\n              opacity: 1,\n              width: 1\n            },\n            move: {\n              enable: true,\n              speed: 2,\n              direction: 'none',\n              random: false,\n              straight: false,\n              out_mode: 'out',\n              bounce: false,\n              attract: {\n                enable: false,\n                rotateX: 3000,\n                rotateY: 3000\n              }\n            },\n            array: []\n          },\n          interactivity: {\n            detect_on: 'canvas',\n            events: {\n              onhover: {\n                enable: true,\n                mode: 'grab'\n              },\n              onclick: {\n                enable: true,\n                mode: 'push'\n              },\n              resize: true\n            },\n            modes: {\n              grab:{\n                distance: 100,\n                line_linked:{\n                  opacity: 1\n                }\n              },\n              bubble:{\n                distance: 200,\n                size: 80,\n                duration: 0.4\n              },\n              repulse:{\n                distance: 200,\n                duration: 0.4\n              },\n              push:{\n                particles_nb: 4\n              },\n              remove:{\n                particles_nb: 2\n              }\n            },\n            mouse:{}\n          },\n      detectRetina: true,\n    }),\n    [],\n  );\n\n\n  return <Particles id={props.id} init={particlesLoaded} options={options} />; \n};\n\nexport default ParticlesComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}