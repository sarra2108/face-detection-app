{"ast":null,"code":"var _jsxFileName = \"/Users/sarrasassi/my-app/face-recognition-brain-2/src/App.js\";\nimport React, { Component } from 'react';\n// import Particles from 'react-particles-js';\nimport ParticlesBg from 'particles-bg';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Navigation from './components/Navigation/Navigation';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: 'e51efb33f6234d068f3035c18a2bdc13'\n});\nconst PAT = 'b2b7fbb32a354800b86c3ac23cbedc09';\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\nconst USER_ID = 'f47rvf3e1qkg';\nconst APP_ID = 'test';\n// Change these to whatever model and image URL you want to use\nconst MODEL_ID = 'face-detection';\nconst MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\nconst IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\nconst raw = JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": USER_ID,\n    \"app_id\": APP_ID\n  },\n  \"inputs\": [{\n    \"data\": {\n      \"image\": {\n        \"url\": IMAGE_URL\n        // \"base64\": IMAGE_BYTES_STRING\n      }\n    }\n  }]\n});\n\nconst requestOptions = {\n  method: 'POST',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key ' + PAT\n  },\n  body: raw\n};\n//   const returnClarifaiRequestOptions = (imageUrl) =>{\n\n//     ///////////////////////////////////////////////////////////////////////////////////////////////////\n//     // In this section, we set the user authentication, user and app ID, model details, and the URL\n//     // of the image we want as an input. Change these strings to run your own example.\n//     //////////////////////////////////////////////////////////////////////////////////////////////////\n\n//     // Your PAT (Personal Access Token) can be found in the portal under Authentification\n//     const PAT = 'b2b7fbb32a354800b86c3ac23cbedc09';\n//     // Specify the correct user_id/app_id pairings\n//     // Since you're making inferences outside your app's scope\n//     const USER_ID = 'f47rvf3e1qkg';       \n//     const APP_ID = 'test';\n//     // Change these to whatever model and image URL you want to use\n//     const MODEL_ID = 'face-detection';\n//     const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';    \n//     const IMAGE_URL = imageUrl;\n//     const raw = JSON.stringify({\n//       \"user_app_id\": {\n//           \"user_id\": USER_ID,\n//           \"app_id\": APP_ID\n//       },\n//       \"inputs\": [\n//           {\n//               \"data\": {\n//                   \"image\": {\n//                       \"url\": IMAGE_URL\n//                   }\n//               }\n//           }\n//       ]\n//   });\n//   const requestOptions = {\n//     method: 'POST',\n//     headers: {\n//         'Accept': 'application/json',\n//         'Authorization': 'Key ' + PAT\n//     },\n//     body: raw\n// };\n//   return requestOptions\n//   }\n\n// No Longer need this. Updated to particles-bg\n// const particlesOptions = {\n//   particles: {\n//     number: {\n//       value: 30,\n//       density: {\n//         enable: true,\n//         value_area: 800\n//       }\n//     }\n//   }\n// }\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n        }\n      });\n    };\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n    this.displayFaceBox = box => {\n      this.setState({\n        box: box\n      });\n    };\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n\n      // HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\n      // A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\n      // for the Face Detect Mode: https://www.clarifai.com/models/face-detection\n      // If that isn't working, then that means you will have to wait until their servers are back up. \n\n      // app.models.predict('face-detection', this.state.input)\n      fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", requestOptions).then(response => response.json()).then(result => {\n        const regions = result.outputs[0].data.regions;\n        regions.forEach(region => {\n          // Accessing and rounding the bounding box values\n          const boundingBox = region.region_info.bounding_box;\n          const topRow = boundingBox.top_row.toFixed(3);\n          const leftCol = boundingBox.left_col.toFixed(3);\n          const bottomRow = boundingBox.bottom_row.toFixed(3);\n          const rightCol = boundingBox.right_col.toFixed(3);\n          region.data.concepts.forEach(concept => {\n            // Accessing and rounding the concept value\n            const name = concept.name;\n            const value = concept.value.toFixed(4);\n            console.log(`${name}: ${value} BBox: ${topRow}, ${leftCol}, ${bottomRow}, ${rightCol}`);\n          });\n        });\n      }).catch(error => console.log('error', error));\n\n      // .then(response => {\n      //   console.log('hi', response)\n      //   if (response) {\n      //     fetch('http://localhost:3000/image', {\n      //       method: 'put',\n      //       headers: {'Content-Type': 'application/json'},\n      //       body: JSON.stringify({\n      //         id: this.state.user.id\n      //       })\n      //     })\n      //       .then(response => response.json())\n      //       .then(count => {\n      //         this.setState(Object.assign(this.state.user, { entries: count}))\n      //       })\n\n      //   }\n      //   this.displayFaceBox(this.calculateFaceLocation(response))\n      // })\n      // .catch(err => console.log(err));\n    };\n    this.onRouteChange = route => {\n      if (route === 'signout') {\n        this.setState({\n          isSignedIn: false\n        });\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n      this.setState({\n        route: route\n      });\n    };\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'signin',\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        entries: 0,\n        joined: ''\n      }\n    };\n  }\n  componentDidMount() {\n    fetch('http://localhost:3000/').then(response => response.json()).then(console.log);\n  }\n  render() {\n    const {\n      isSignedIn,\n      imageUrl,\n      route,\n      box\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        type: \"fountain\",\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n        isSignedIn: isSignedIn,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), route === 'home' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          name: this.state.user.name,\n          entries: this.state.user.entries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onButtonSubmit: this.onButtonSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          box: box,\n          imageUrl: imageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }, this) : route === 'signin' ? /*#__PURE__*/_jsxDEV(Signin, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 16\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","ParticlesBg","Clarifai","FaceRecognition","Navigation","Signin","Register","Logo","ImageLinkForm","Rank","jsxDEV","_jsxDEV","app","App","apiKey","PAT","USER_ID","APP_ID","MODEL_ID","MODEL_VERSION_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","constructor","loadUser","data","setState","user","id","name","email","entries","joined","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","onInputChange","event","input","target","value","onButtonSubmit","imageUrl","state","fetch","then","response","json","result","forEach","region","boundingBox","toFixed","concepts","concept","console","log","catch","error","onRouteChange","route","isSignedIn","componentDidMount","render","className","children","type","bg","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/sarrasassi/my-app/face-recognition-brain-2/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\n// import Particles from 'react-particles-js';\nimport ParticlesBg from 'particles-bg'\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Navigation from './components/Navigation/Navigation';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\n\nconst app = new Clarifai.App({\n  apiKey: 'e51efb33f6234d068f3035c18a2bdc13'\n });\n const PAT = 'b2b7fbb32a354800b86c3ac23cbedc09';\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\nconst USER_ID = 'f47rvf3e1qkg';\nconst APP_ID = 'test';\n// Change these to whatever model and image URL you want to use\nconst MODEL_ID = 'face-detection';\nconst MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\nconst IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\nconst raw = JSON.stringify({   \n  \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                  \"url\": IMAGE_URL\n                  // \"base64\": IMAGE_BYTES_STRING\n              }\n          }\n      }\n  ]\n});\n\nconst requestOptions = {\n  method: 'POST',\n  headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n  },\n  body: raw\n};\n//   const returnClarifaiRequestOptions = (imageUrl) =>{\n\n//     ///////////////////////////////////////////////////////////////////////////////////////////////////\n//     // In this section, we set the user authentication, user and app ID, model details, and the URL\n//     // of the image we want as an input. Change these strings to run your own example.\n//     //////////////////////////////////////////////////////////////////////////////////////////////////\n\n//     // Your PAT (Personal Access Token) can be found in the portal under Authentification\n//     const PAT = 'b2b7fbb32a354800b86c3ac23cbedc09';\n//     // Specify the correct user_id/app_id pairings\n//     // Since you're making inferences outside your app's scope\n//     const USER_ID = 'f47rvf3e1qkg';       \n//     const APP_ID = 'test';\n//     // Change these to whatever model and image URL you want to use\n//     const MODEL_ID = 'face-detection';\n//     const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';    \n//     const IMAGE_URL = imageUrl;\n//     const raw = JSON.stringify({\n//       \"user_app_id\": {\n//           \"user_id\": USER_ID,\n//           \"app_id\": APP_ID\n//       },\n//       \"inputs\": [\n//           {\n//               \"data\": {\n//                   \"image\": {\n//                       \"url\": IMAGE_URL\n//                   }\n//               }\n//           }\n//       ]\n//   });\n//   const requestOptions = {\n//     method: 'POST',\n//     headers: {\n//         'Accept': 'application/json',\n//         'Authorization': 'Key ' + PAT\n//     },\n//     body: raw\n// };\n//   return requestOptions\n//   }\n\n// No Longer need this. Updated to particles-bg\n// const particlesOptions = {\n//   particles: {\n//     number: {\n//       value: 30,\n//       density: {\n//         enable: true,\n//         value_area: 800\n//       }\n//     }\n//   }\n// }\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'signin',\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        entries: 0,\n        joined: ''\n      }\n    }\n  }\n\n  loadUser = (data) => {\n    this.setState({user: {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      entries: data.entries,\n      joined: data.joined\n    }})\n  }\n  componentDidMount(){\n    fetch('http://localhost:3000/')\n    .then(response =>response.json())\n    .then(console.log)\n  }\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    this.setState({box: box});\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value});\n  }\n\n  onButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input});\n   \n    // HEADS UP! Sometimes the Clarifai Models can be down or not working as they are constantly getting updated.\n    // A good way to check if the model you are using is up, is to check them on the clarifai website. For example,\n    // for the Face Detect Mode: https://www.clarifai.com/models/face-detection\n    // If that isn't working, then that means you will have to wait until their servers are back up. \n\n   // app.models.predict('face-detection', this.state.input)\n    fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", requestOptions)\n        .then(response => response.json())\n        .then(result => {\n\n          const regions = result.outputs[0].data.regions;\n  \n          regions.forEach(region => {\n              // Accessing and rounding the bounding box values\n              const boundingBox = region.region_info.bounding_box;\n              const topRow = boundingBox.top_row.toFixed(3);\n              const leftCol = boundingBox.left_col.toFixed(3);\n              const bottomRow = boundingBox.bottom_row.toFixed(3);\n              const rightCol = boundingBox.right_col.toFixed(3);\n  \n              region.data.concepts.forEach(concept => {\n                  // Accessing and rounding the concept value\n                  const name = concept.name;\n                  const value = concept.value.toFixed(4);\n  \n                  console.log(`${name}: ${value} BBox: ${topRow}, ${leftCol}, ${bottomRow}, ${rightCol}`);\n                  \n              });\n          });\n  \n      })\n      .catch(error => console.log('error', error));\n  \n      // .then(response => {\n      //   console.log('hi', response)\n      //   if (response) {\n      //     fetch('http://localhost:3000/image', {\n      //       method: 'put',\n      //       headers: {'Content-Type': 'application/json'},\n      //       body: JSON.stringify({\n      //         id: this.state.user.id\n      //       })\n      //     })\n      //       .then(response => response.json())\n      //       .then(count => {\n      //         this.setState(Object.assign(this.state.user, { entries: count}))\n      //       })\n\n      //   }\n      //   this.displayFaceBox(this.calculateFaceLocation(response))\n      // })\n      // .catch(err => console.log(err));\n  }\n\n  onRouteChange = (route) => {\n    if (route === 'signout') {\n      this.setState({isSignedIn: false})\n    } else if (route === 'home') {\n      this.setState({isSignedIn: true})\n    }\n    this.setState({route: route});\n  }\n\n  render() {\n    const { isSignedIn, imageUrl, route, box } = this.state;\n    return (\n      <div className=\"App\">\n        <ParticlesBg type=\"fountain\" bg={true} />\n        <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange} />\n        { route === 'home'\n          ? <div>\n              <Logo />\n              <Rank\n                name={this.state.user.name}\n                entries={this.state.user.entries}\n              />\n              <ImageLinkForm\n                onInputChange={this.onInputChange}\n                onButtonSubmit={this.onButtonSubmit}\n              />\n              <FaceRecognition box={box} imageUrl={imageUrl} />\n            </div>\n          : (\n             route === 'signin'\n             ? <Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\n             : <Register loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\n            )\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}