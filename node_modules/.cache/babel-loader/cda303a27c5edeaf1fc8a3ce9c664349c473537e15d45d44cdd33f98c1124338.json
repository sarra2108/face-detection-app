{"ast":null,"code":"var _jsxFileName = \"/Users/sarrasassi/my-app/face-recognition-brain-2/src/components/ParticlesBackground.js\",\n  _s = $RefreshSig$();\nimport Particles, { initParticlesEngine } from \"@tsparticles/react\";\nimport { useEffect, useMemo, useState } from \"react\";\n// import { loadAll } from \"@/tsparticles/all\"; // if you are going to use `loadAll`, install the \"@tsparticles/all\" package too.\n// import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too.\nimport { loadSlim } from \"@tsparticles/slim\"; // if you are going to use `loadSlim`, install the \"@tsparticles/slim\" package too.\n// import { loadBasic } from \"@tsparticles/basic\"; // if you are going to use `loadBasic`, install the \"@tsparticles/basic\" package too.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParticlesComponent = props => {\n  _s();\n  const [init, setInit] = useState(false);\n  // this should be run only once per application lifetime\n  useEffect(() => {\n    initParticlesEngine(async engine => {\n      // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n      // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n      // starting from v2 you can add only the features you need reducing the bundle size\n      //await loadAll(engine);\n      //await loadFull(engine);\n      await loadSlim(engine);\n      //await loadBasic(engine);\n    }).then(() => {\n      setInit(true);\n    });\n  }, []);\n  const particlesLoaded = container => {\n    console.log(container);\n  };\n  const options = useMemo(() => ({\n    background: {\n      color: {\n        value: \"linear-gradient(89deg, #FF5EDF 0%, #04C8DE 100%)\"\n      }\n    },\n    fpsLimit: 120,\n    interactivity: {\n      events: {\n        onClick: {\n          enable: true,\n          mode: \"repulse\"\n        },\n        onHover: {\n          enable: true,\n          mode: 'push'\n        }\n      },\n      modes: {\n        push: {\n          distance: 200,\n          duration: 15\n        },\n        grab: {\n          distance: 150\n        }\n      }\n    },\n    particles: {\n      number: {\n        value: 80,\n        density: {\n          enable: true,\n          value_area: 800\n        }\n      },\n      color: {\n        value: \"#ffffff\"\n      },\n      shape: {\n        type: \"circle\",\n        stroke: {\n          width: 0,\n          color: \"#000000\"\n        },\n        polygon: {\n          nb_sides: 5\n        },\n        image: {\n          src: \"img/github.svg\",\n          width: 100,\n          height: 100\n        }\n      },\n      opacity: {\n        value: 0.5,\n        random: false,\n        anim: {\n          enable: false,\n          speed: 1,\n          opacity_min: 0.1,\n          sync: false\n        }\n      },\n      size: {\n        value: 5,\n        random: true,\n        anim: {\n          enable: false,\n          speed: 40,\n          size_min: 0.1,\n          sync: false\n        }\n      },\n      line_linked: {\n        enable: true,\n        distance: 150,\n        color: \"#ffffff\",\n        opacity: 0.4,\n        width: 1\n      },\n      move: {\n        enable: true,\n        speed: 6,\n        direction: \"none\",\n        random: false,\n        straight: false,\n        out_mode: \"out\",\n        attract: {\n          enable: false,\n          rotateX: 600,\n          rotateY: 1200\n        }\n      }\n    },\n    interactivity: {\n      detect_on: \"canvas\",\n      events: {\n        onhover: {\n          enable: true,\n          mode: \"repulse\"\n        },\n        onclick: {\n          enable: true,\n          mode: \"push\"\n        },\n        resize: true\n      },\n      modes: {\n        grab: {\n          distance: 400,\n          line_linked: {\n            opacity: 1\n          }\n        },\n        bubble: {\n          distance: 400,\n          size: 40,\n          duration: 2,\n          opacity: 8,\n          speed: 3\n        },\n        repulse: {\n          distance: 200\n        },\n        push: {\n          particles_nb: 4\n        },\n        remove: {\n          particles_nb: 2\n        }\n      }\n    },\n    detectRetina: true\n  }), []);\n  return /*#__PURE__*/_jsxDEV(Particles, {\n    id: props.id,\n    init: particlesLoaded,\n    options: options\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 10\n  }, this);\n};\n_s(ParticlesComponent, \"eB+NWpxmGZSqHQDaTSx/Qv0E/5M=\");\n_c = ParticlesComponent;\nexport default ParticlesComponent;\nvar _c;\n$RefreshReg$(_c, \"ParticlesComponent\");","map":{"version":3,"names":["Particles","initParticlesEngine","useEffect","useMemo","useState","loadSlim","jsxDEV","_jsxDEV","ParticlesComponent","props","_s","init","setInit","engine","then","particlesLoaded","container","console","log","options","background","color","value","fpsLimit","interactivity","events","onClick","enable","mode","onHover","modes","push","distance","duration","grab","particles","number","density","value_area","shape","type","stroke","width","polygon","nb_sides","image","src","height","opacity","random","anim","speed","opacity_min","sync","size","size_min","line_linked","move","direction","straight","out_mode","attract","rotateX","rotateY","detect_on","onhover","onclick","resize","bubble","repulse","particles_nb","remove","detectRetina","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sarrasassi/my-app/face-recognition-brain-2/src/components/ParticlesBackground.js"],"sourcesContent":["import Particles, { initParticlesEngine } from \"@tsparticles/react\";\nimport { useEffect, useMemo, useState } from \"react\";\n// import { loadAll } from \"@/tsparticles/all\"; // if you are going to use `loadAll`, install the \"@tsparticles/all\" package too.\n// import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too.\nimport { loadSlim } from \"@tsparticles/slim\"; // if you are going to use `loadSlim`, install the \"@tsparticles/slim\" package too.\n// import { loadBasic } from \"@tsparticles/basic\"; // if you are going to use `loadBasic`, install the \"@tsparticles/basic\" package too.\n\n\n\nconst ParticlesComponent = (props) => {\n\n  const [init, setInit] = useState(false);\n  // this should be run only once per application lifetime\n  useEffect(() => {\n    initParticlesEngine(async (engine) => {\n      // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n      // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n      // starting from v2 you can add only the features you need reducing the bundle size\n      //await loadAll(engine);\n      //await loadFull(engine);\n      await loadSlim(engine);\n      //await loadBasic(engine);\n    }).then(() => {\n      setInit(true);\n    });\n  }, []);\n\n  const particlesLoaded = (container) => {\n    console.log(container);\n  };\n\n\n  const options = useMemo(\n    () => ({\n      background: {\n        color: {\n          value: \"linear-gradient(89deg, #FF5EDF 0%, #04C8DE 100%)\",\n        },\n      },\n      fpsLimit: 120,\n      interactivity: {\n        events: {\n          onClick: {\n            enable: true,\n            mode: \"repulse\",\n          },\n          onHover: {\n            enable: true,\n            mode: 'push',\n          },\n        },\n        modes: {\n          push: {\n            distance: 200,\n            duration: 15,\n          },\n          grab: {\n            distance: 150,\n          },\n        },\n      },\n      particles: {\n        number: {\n          value: 80,\n          density: {\n            enable: true,\n            value_area: 800\n          }\n        },\n        color: {\n          value: \"#ffffff\"\n        },\n        shape: {\n          type: \"circle\",\n          stroke: {\n            width: 0,\n            color: \"#000000\"\n          },\n          polygon: {\n            nb_sides: 5\n          },\n          image: {\n            src: \"img/github.svg\",\n            width: 100,\n            height: 100\n          }\n        },\n        opacity: {\n          value: 0.5,\n          random: false,\n          anim: {\n            enable: false,\n            speed: 1,\n            opacity_min: 0.1,\n            sync: false\n          }\n        },\n        size: {\n          value: 5,\n          random: true,\n          anim: {\n            enable: false,\n            speed: 40,\n            size_min: 0.1,\n            sync: false\n          }\n        },\n        line_linked: {\n          enable: true,\n          distance: 150,\n          color: \"#ffffff\",\n          opacity: 0.4,\n          width: 1\n        },\n        move: {\n          enable: true,\n          speed: 6,\n          direction: \"none\",\n          random: false,\n          straight: false,\n          out_mode: \"out\",\n          attract: {\n            enable: false,\n            rotateX: 600,\n            rotateY: 1200\n          }\n        }\n      },\n      interactivity: {\n        detect_on: \"canvas\",\n        events: {\n          onhover: {\n            enable: true,\n            mode: \"repulse\"\n          },\n          onclick: {\n            enable: true,\n            mode: \"push\"\n          },\n          resize: true\n        },\n        modes: {\n          grab: {\n            distance: 400,\n            line_linked: {\n              opacity: 1\n            }\n          },\n          bubble: {\n            distance: 400,\n            size: 40,\n            duration: 2,\n            opacity: 8,\n            speed: 3\n          },\n          repulse: {\n            distance: 200\n          },\n          push: {\n            particles_nb: 4\n          },\n          remove: {\n            particles_nb: 2\n          }\n        }\n      },\n      detectRetina: true,\n    }),\n    [],\n  );\n\n\n  return <Particles id={props.id} init={particlesLoaded} options={options} />; \n};\n\nexport default ParticlesComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}