{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractChatCompletionRunner_instances, _AbstractChatCompletionRunner_connectedPromise, _AbstractChatCompletionRunner_resolveConnectedPromise, _AbstractChatCompletionRunner_rejectConnectedPromise, _AbstractChatCompletionRunner_endPromise, _AbstractChatCompletionRunner_resolveEndPromise, _AbstractChatCompletionRunner_rejectEndPromise, _AbstractChatCompletionRunner_listeners, _AbstractChatCompletionRunner_ended, _AbstractChatCompletionRunner_errored, _AbstractChatCompletionRunner_aborted, _AbstractChatCompletionRunner_catchingPromiseCreated, _AbstractChatCompletionRunner_getFinalContent, _AbstractChatCompletionRunner_getFinalMessage, _AbstractChatCompletionRunner_getFinalFunctionCall, _AbstractChatCompletionRunner_getFinalFunctionCallResult, _AbstractChatCompletionRunner_calculateTotalUsage, _AbstractChatCompletionRunner_handleError, _AbstractChatCompletionRunner_validateParams, _AbstractChatCompletionRunner_stringifyFunctionCallResult;\nimport { APIUserAbortError, OpenAIError } from 'openai/error';\nimport { isRunnableFunctionWithParse } from \"./RunnableFunction.mjs\";\nimport { isAssistantMessage, isFunctionMessage, isToolMessage } from \"./chatCompletionUtils.mjs\";\nconst DEFAULT_MAX_CHAT_COMPLETIONS = 10;\nexport class AbstractChatCompletionRunner {\n  constructor() {\n    _AbstractChatCompletionRunner_instances.add(this);\n    this.controller = new AbortController();\n    _AbstractChatCompletionRunner_connectedPromise.set(this, void 0);\n    _AbstractChatCompletionRunner_resolveConnectedPromise.set(this, () => {});\n    _AbstractChatCompletionRunner_rejectConnectedPromise.set(this, () => {});\n    _AbstractChatCompletionRunner_endPromise.set(this, void 0);\n    _AbstractChatCompletionRunner_resolveEndPromise.set(this, () => {});\n    _AbstractChatCompletionRunner_rejectEndPromise.set(this, () => {});\n    _AbstractChatCompletionRunner_listeners.set(this, {});\n    this._chatCompletions = [];\n    this.messages = [];\n    _AbstractChatCompletionRunner_ended.set(this, false);\n    _AbstractChatCompletionRunner_errored.set(this, false);\n    _AbstractChatCompletionRunner_aborted.set(this, false);\n    _AbstractChatCompletionRunner_catchingPromiseCreated.set(this, false);\n    _AbstractChatCompletionRunner_handleError.set(this, error => {\n      __classPrivateFieldSet(this, _AbstractChatCompletionRunner_errored, true, \"f\");\n      if (error instanceof Error && error.name === 'AbortError') {\n        error = new APIUserAbortError();\n      }\n      if (error instanceof APIUserAbortError) {\n        __classPrivateFieldSet(this, _AbstractChatCompletionRunner_aborted, true, \"f\");\n        return this._emit('abort', error);\n      }\n      if (error instanceof OpenAIError) {\n        return this._emit('error', error);\n      }\n      if (error instanceof Error) {\n        const openAIError = new OpenAIError(error.message);\n        // @ts-ignore\n        openAIError.cause = error;\n        return this._emit('error', openAIError);\n      }\n      return this._emit('error', new OpenAIError(String(error)));\n    });\n    __classPrivateFieldSet(this, _AbstractChatCompletionRunner_connectedPromise, new Promise((resolve, reject) => {\n      __classPrivateFieldSet(this, _AbstractChatCompletionRunner_resolveConnectedPromise, resolve, \"f\");\n      __classPrivateFieldSet(this, _AbstractChatCompletionRunner_rejectConnectedPromise, reject, \"f\");\n    }), \"f\");\n    __classPrivateFieldSet(this, _AbstractChatCompletionRunner_endPromise, new Promise((resolve, reject) => {\n      __classPrivateFieldSet(this, _AbstractChatCompletionRunner_resolveEndPromise, resolve, \"f\");\n      __classPrivateFieldSet(this, _AbstractChatCompletionRunner_rejectEndPromise, reject, \"f\");\n    }), \"f\");\n    // Don't let these promises cause unhandled rejection errors.\n    // we will manually cause an unhandled rejection error later\n    // if the user hasn't registered any error listener or called\n    // any promise-returning method.\n    __classPrivateFieldGet(this, _AbstractChatCompletionRunner_connectedPromise, \"f\").catch(() => {});\n    __classPrivateFieldGet(this, _AbstractChatCompletionRunner_endPromise, \"f\").catch(() => {});\n  }\n  _run(executor) {\n    // Unfortunately if we call `executor()` immediately we get runtime errors about\n    // references to `this` before the `super()` constructor call returns.\n    setTimeout(() => {\n      executor().then(() => {\n        this._emitFinal();\n        this._emit('end');\n      }, __classPrivateFieldGet(this, _AbstractChatCompletionRunner_handleError, \"f\"));\n    }, 0);\n  }\n  _addChatCompletion(chatCompletion) {\n    this._chatCompletions.push(chatCompletion);\n    this._emit('chatCompletion', chatCompletion);\n    const message = chatCompletion.choices[0]?.message;\n    if (message) this._addMessage(message);\n    return chatCompletion;\n  }\n  _addMessage(message, emit = true) {\n    if (!('content' in message)) message.content = null;\n    this.messages.push(message);\n    if (emit) {\n      this._emit('message', message);\n      if ((isFunctionMessage(message) || isToolMessage(message)) && message.content) {\n        // Note, this assumes that {role: 'tool', content: â€¦} is always the result of a call of tool of type=function.\n        this._emit('functionCallResult', message.content);\n      } else if (isAssistantMessage(message) && message.function_call) {\n        this._emit('functionCall', message.function_call);\n      } else if (isAssistantMessage(message) && message.tool_calls) {\n        for (const tool_call of message.tool_calls) {\n          if (tool_call.type === 'function') {\n            this._emit('functionCall', tool_call.function);\n          }\n        }\n      }\n    }\n  }\n  _connected() {\n    if (this.ended) return;\n    __classPrivateFieldGet(this, _AbstractChatCompletionRunner_resolveConnectedPromise, \"f\").call(this);\n    this._emit('connect');\n  }\n  get ended() {\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_ended, \"f\");\n  }\n  get errored() {\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_errored, \"f\");\n  }\n  get aborted() {\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_aborted, \"f\");\n  }\n  abort() {\n    this.controller.abort();\n  }\n  /**\n   * Adds the listener function to the end of the listeners array for the event.\n   * No checks are made to see if the listener has already been added. Multiple calls passing\n   * the same combination of event and listener will result in the listener being added, and\n   * called, multiple times.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  on(event, listener) {\n    const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = []);\n    listeners.push({\n      listener\n    });\n    return this;\n  }\n  /**\n   * Removes the specified listener from the listener array for the event.\n   * off() will remove, at most, one instance of a listener from the listener array. If any single\n   * listener has been added multiple times to the listener array for the specified event, then\n   * off() must be called multiple times to remove each instance.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  off(event, listener) {\n    const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event];\n    if (!listeners) return this;\n    const index = listeners.findIndex(l => l.listener === listener);\n    if (index >= 0) listeners.splice(index, 1);\n    return this;\n  }\n  /**\n   * Adds a one-time listener function for the event. The next time the event is triggered,\n   * this listener is removed and then invoked.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  once(event, listener) {\n    const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = []);\n    listeners.push({\n      listener,\n      once: true\n    });\n    return this;\n  }\n  /**\n   * This is similar to `.once()`, but returns a Promise that resolves the next time\n   * the event is triggered, instead of calling a listener callback.\n   * @returns a Promise that resolves the next time given event is triggered,\n   * or rejects if an error is emitted.  (If you request the 'error' event,\n   * returns a promise that resolves with the error).\n   *\n   * Example:\n   *\n   *   const message = await stream.emitted('message') // rejects if the stream errors\n   */\n  emitted(event) {\n    return new Promise((resolve, reject) => {\n      __classPrivateFieldSet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, true, \"f\");\n      if (event !== 'error') this.once('error', reject);\n      this.once(event, resolve);\n    });\n  }\n  async done() {\n    __classPrivateFieldSet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, true, \"f\");\n    await __classPrivateFieldGet(this, _AbstractChatCompletionRunner_endPromise, \"f\");\n  }\n  /**\n   * @returns a promise that resolves with the final ChatCompletion, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n   */\n  async finalChatCompletion() {\n    await this.done();\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (!completion) throw new OpenAIError('stream ended without producing a ChatCompletion');\n    return completion;\n  }\n  /**\n   * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalContent() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n  }\n  /**\n   * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\n   * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalMessage() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n  }\n  /**\n   * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalFunctionCall() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n  }\n  async finalFunctionCallResult() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n  }\n  async totalUsage() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);\n  }\n  allChatCompletions() {\n    return [...this._chatCompletions];\n  }\n  _emit(event, ...args) {\n    // make sure we don't emit any events after end\n    if (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_ended, \"f\")) {\n      return;\n    }\n    if (event === 'end') {\n      __classPrivateFieldSet(this, _AbstractChatCompletionRunner_ended, true, \"f\");\n      __classPrivateFieldGet(this, _AbstractChatCompletionRunner_resolveEndPromise, \"f\").call(this);\n    }\n    const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event];\n    if (listeners) {\n      __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = listeners.filter(l => !l.once);\n      listeners.forEach(({\n        listener\n      }) => listener(...args));\n    }\n    if (event === 'abort') {\n      const error = args[0];\n      if (!__classPrivateFieldGet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, \"f\") && !listeners?.length) {\n        Promise.reject(error);\n      }\n      __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectConnectedPromise, \"f\").call(this, error);\n      __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectEndPromise, \"f\").call(this, error);\n      this._emit('end');\n      return;\n    }\n    if (event === 'error') {\n      // NOTE: _emit('error', error) should only be called from #handleError().\n      const error = args[0];\n      if (!__classPrivateFieldGet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, \"f\") && !listeners?.length) {\n        // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n        // If you are seeing stack traces here, make sure to handle errors via either:\n        // - runner.on('error', () => ...)\n        // - await runner.done()\n        // - await runner.finalChatCompletion()\n        // - etc.\n        Promise.reject(error);\n      }\n      __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectConnectedPromise, \"f\").call(this, error);\n      __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectEndPromise, \"f\").call(this, error);\n      this._emit('end');\n    }\n  }\n  _emitFinal() {\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (completion) this._emit('finalChatCompletion', completion);\n    const finalMessage = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n    if (finalMessage) this._emit('finalMessage', finalMessage);\n    const finalContent = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n    if (finalContent) this._emit('finalContent', finalContent);\n    const finalFunctionCall = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n    if (finalFunctionCall) this._emit('finalFunctionCall', finalFunctionCall);\n    const finalFunctionCallResult = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n    if (finalFunctionCallResult != null) this._emit('finalFunctionCallResult', finalFunctionCallResult);\n    if (this._chatCompletions.some(c => c.usage)) {\n      this._emit('totalUsage', __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));\n    }\n  }\n  async _createChatCompletion(completions, params, options) {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_validateParams).call(this, params);\n    const chatCompletion = await completions.create({\n      ...params,\n      stream: false\n    }, {\n      ...options,\n      signal: this.controller.signal\n    });\n    this._connected();\n    return this._addChatCompletion(chatCompletion);\n  }\n  async _runChatCompletion(completions, params, options) {\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n    return await this._createChatCompletion(completions, params, options);\n  }\n  async _runFunctions(completions, params, options) {\n    const role = 'function';\n    const {\n      function_call = 'auto',\n      stream,\n      ...restParams\n    } = params;\n    const singleFunctionToCall = typeof function_call !== 'string' && function_call?.name;\n    const {\n      maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS\n    } = options || {};\n    const functionsByName = {};\n    for (const f of params.functions) {\n      functionsByName[f.name || f.function.name] = f;\n    }\n    const functions = params.functions.map(f => ({\n      name: f.name || f.function.name,\n      parameters: f.parameters,\n      description: f.description\n    }));\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n    for (let i = 0; i < maxChatCompletions; ++i) {\n      const chatCompletion = await this._createChatCompletion(completions, {\n        ...restParams,\n        function_call,\n        functions,\n        messages: [...this.messages]\n      }, options);\n      const message = chatCompletion.choices[0]?.message;\n      if (!message) {\n        throw new OpenAIError(`missing message in ChatCompletion response`);\n      }\n      if (!message.function_call) return;\n      const {\n        name,\n        arguments: args\n      } = message.function_call;\n      const fn = functionsByName[name];\n      if (!fn) {\n        const content = `Invalid function_call: ${JSON.stringify(name)}. Available options are: ${functions.map(f => JSON.stringify(f.name)).join(', ')}. Please try again`;\n        this._addMessage({\n          role,\n          name,\n          content\n        });\n        continue;\n      } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n        const content = `Invalid function_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;\n        this._addMessage({\n          role,\n          name,\n          content\n        });\n        continue;\n      }\n      let parsed;\n      try {\n        parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n      } catch (error) {\n        this._addMessage({\n          role,\n          name,\n          content: error instanceof Error ? error.message : String(error)\n        });\n        continue;\n      }\n      // @ts-expect-error it can't rule out `never` type.\n      const rawContent = await fn.function(parsed, this);\n      const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n      this._addMessage({\n        role,\n        name,\n        content\n      });\n      if (singleFunctionToCall) return;\n    }\n  }\n  async _runTools(completions, params, options) {\n    const role = 'tool';\n    const {\n      tool_choice = 'auto',\n      stream,\n      ...restParams\n    } = params;\n    const singleFunctionToCall = typeof tool_choice !== 'string' && tool_choice?.function?.name;\n    const {\n      maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS\n    } = options || {};\n    const functionsByName = {};\n    for (const f of params.tools) {\n      if (f.type === 'function') {\n        functionsByName[f.function.name || f.function.function.name] = f.function;\n      }\n    }\n    const tools = 'tools' in params ? params.tools.map(t => t.type === 'function' ? {\n      type: 'function',\n      function: {\n        name: t.function.name || t.function.function.name,\n        parameters: t.function.parameters,\n        description: t.function.description\n      }\n    } : t) : undefined;\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n    for (let i = 0; i < maxChatCompletions; ++i) {\n      const chatCompletion = await this._createChatCompletion(completions, {\n        ...restParams,\n        tool_choice,\n        tools,\n        messages: [...this.messages]\n      }, options);\n      const message = chatCompletion.choices[0]?.message;\n      if (!message) {\n        throw new OpenAIError(`missing message in ChatCompletion response`);\n      }\n      if (!message.tool_calls) {\n        return;\n      }\n      for (const tool_call of message.tool_calls) {\n        if (tool_call.type !== 'function') continue;\n        const tool_call_id = tool_call.id;\n        const {\n          name,\n          arguments: args\n        } = tool_call.function;\n        const fn = functionsByName[name];\n        if (!fn) {\n          const content = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${tools.map(f => JSON.stringify(f.function.name)).join(', ')}. Please try again`;\n          this._addMessage({\n            role,\n            tool_call_id,\n            content\n          });\n          continue;\n        } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n          const content = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;\n          this._addMessage({\n            role,\n            tool_call_id,\n            content\n          });\n          continue;\n        }\n        let parsed;\n        try {\n          parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n        } catch (error) {\n          const content = error instanceof Error ? error.message : String(error);\n          this._addMessage({\n            role,\n            tool_call_id,\n            content\n          });\n          continue;\n        }\n        // @ts-expect-error it can't rule out `never` type.\n        const rawContent = await fn.function(parsed, this);\n        const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n        this._addMessage({\n          role,\n          tool_call_id,\n          content\n        });\n        if (singleFunctionToCall) {\n          return;\n        }\n      }\n    }\n    return;\n  }\n}\n_AbstractChatCompletionRunner_connectedPromise = new WeakMap(), _AbstractChatCompletionRunner_resolveConnectedPromise = new WeakMap(), _AbstractChatCompletionRunner_rejectConnectedPromise = new WeakMap(), _AbstractChatCompletionRunner_endPromise = new WeakMap(), _AbstractChatCompletionRunner_resolveEndPromise = new WeakMap(), _AbstractChatCompletionRunner_rejectEndPromise = new WeakMap(), _AbstractChatCompletionRunner_listeners = new WeakMap(), _AbstractChatCompletionRunner_ended = new WeakMap(), _AbstractChatCompletionRunner_errored = new WeakMap(), _AbstractChatCompletionRunner_aborted = new WeakMap(), _AbstractChatCompletionRunner_catchingPromiseCreated = new WeakMap(), _AbstractChatCompletionRunner_handleError = new WeakMap(), _AbstractChatCompletionRunner_instances = new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent() {\n  return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this).content ?? null;\n}, _AbstractChatCompletionRunner_getFinalMessage = function _AbstractChatCompletionRunner_getFinalMessage() {\n  let i = this.messages.length;\n  while (i-- > 0) {\n    const message = this.messages[i];\n    if (isAssistantMessage(message)) {\n      return {\n        ...message,\n        content: message.content ?? null\n      };\n    }\n  }\n  throw new OpenAIError('stream ended without producing a ChatCompletionMessage with role=assistant');\n}, _AbstractChatCompletionRunner_getFinalFunctionCall = function _AbstractChatCompletionRunner_getFinalFunctionCall() {\n  for (let i = this.messages.length - 1; i >= 0; i--) {\n    const message = this.messages[i];\n    if (isAssistantMessage(message) && message?.function_call) {\n      return message.function_call;\n    }\n    if (isAssistantMessage(message) && message?.tool_calls?.length) {\n      return message.tool_calls.at(-1)?.function;\n    }\n  }\n  return;\n}, _AbstractChatCompletionRunner_getFinalFunctionCallResult = function _AbstractChatCompletionRunner_getFinalFunctionCallResult() {\n  for (let i = this.messages.length - 1; i >= 0; i--) {\n    const message = this.messages[i];\n    if (isFunctionMessage(message) && message.content != null) {\n      return message.content;\n    }\n    if (isToolMessage(message) && message.content != null && this.messages.some(x => x.role === 'assistant' && x.tool_calls?.some(y => y.type === 'function' && y.id === message.tool_call_id))) {\n      return message.content;\n    }\n  }\n  return;\n}, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage() {\n  const total = {\n    completion_tokens: 0,\n    prompt_tokens: 0,\n    total_tokens: 0\n  };\n  for (const {\n    usage\n  } of this._chatCompletions) {\n    if (usage) {\n      total.completion_tokens += usage.completion_tokens;\n      total.prompt_tokens += usage.prompt_tokens;\n      total.total_tokens += usage.total_tokens;\n    }\n  }\n  return total;\n}, _AbstractChatCompletionRunner_validateParams = function _AbstractChatCompletionRunner_validateParams(params) {\n  if (params.n != null && params.n > 1) {\n    throw new OpenAIError('ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.');\n  }\n}, _AbstractChatCompletionRunner_stringifyFunctionCallResult = function _AbstractChatCompletionRunner_stringifyFunctionCallResult(rawContent) {\n  return typeof rawContent === 'string' ? rawContent : rawContent === undefined ? 'undefined' : JSON.stringify(rawContent);\n};","map":{"version":3,"mappings":";;;;;;;;;;;;SAUSA,iBAAiB,EAAEC,WAAW,QAAQ,cAAc;SAG3DC,2BAA2B,QAE5B;SAMQC,kBAAkB,EAAEC,iBAAiB,EAAEC,aAAa,QAAE;AAE/D,MAAMC,4BAA4B,GAAG,EAAE;AAMvC,OAAM,MAAgBC,4BAA4B;EAuBhDC;;IApBA,eAAU,GAAoB,IAAIC,eAAe,EAAE;IAEnDC;IACAC,gEAAuC,MAAK,CAAE,CAAC;IAC/CC,+DAAwD,MAAK,CAAE,CAAC;IAEhEC;IACAC,0DAAiC,MAAK,CAAE,CAAC;IACzCC,yDAAkD,MAAK,CAAE,CAAC;IAE1DC,kDAA6E,EAAE;IAErE,qBAAgB,GAAqB,EAAE;IACjD,aAAQ,GAAiC,EAAE;IAE3CC,8CAAS,KAAK;IACdC,gDAAW,KAAK;IAChBC,gDAAW,KAAK;IAChBC,+DAA0B,KAAK;IAkR/BC,oDAAgBC,KAAc,IAAI;MAChCC,2BAAI,yCAAY,IAAI;MACpB,IAAID,KAAK,YAAYE,KAAK,IAAIF,KAAK,CAACG,IAAI,KAAK,YAAY,EAAE;QACzDH,KAAK,GAAG,IAAItB,iBAAiB,EAAE;;MAEjC,IAAIsB,KAAK,YAAYtB,iBAAiB,EAAE;QACtCuB,2BAAI,yCAAY,IAAI;QACpB,OAAO,IAAI,CAACG,KAAK,CAAC,OAAO,EAAEJ,KAAK,CAAC;;MAEnC,IAAIA,KAAK,YAAYrB,WAAW,EAAE;QAChC,OAAO,IAAI,CAACyB,KAAK,CAAC,OAAO,EAAEJ,KAAK,CAAC;;MAEnC,IAAIA,KAAK,YAAYE,KAAK,EAAE;QAC1B,MAAMG,WAAW,GAAgB,IAAI1B,WAAW,CAACqB,KAAK,CAACM,OAAO,CAAC;QAC/D;QACAD,WAAW,CAACE,KAAK,GAAGP,KAAK;QACzB,OAAO,IAAI,CAACI,KAAK,CAAC,OAAO,EAAEC,WAAW,CAAC;;MAEzC,OAAO,IAAI,CAACD,KAAK,CAAC,OAAO,EAAE,IAAIzB,WAAW,CAAC6B,MAAM,CAACR,KAAK,CAAC,CAAC,CAAC;IAC5D,CAAC;IAlSCC,2BAAI,kDAAqB,IAAIQ,OAAO,CAAO,CAACC,OAAO,EAAEC,MAAM,KAAI;MAC7DV,2BAAI,yDAA4BS,OAAO;MACvCT,2BAAI,wDAA2BU,MAAM;IACvC,CAAC,CAAC;IAEFV,2BAAI,4CAAe,IAAIQ,OAAO,CAAO,CAACC,OAAO,EAAEC,MAAM,KAAI;MACvDV,2BAAI,mDAAsBS,OAAO;MACjCT,2BAAI,kDAAqBU,MAAM;IACjC,CAAC,CAAC;IAEF;IACA;IACA;IACA;IACAC,2BAAI,sDAAkB,CAACC,KAAK,CAAC,MAAK,CAAE,CAAC,CAAC;IACtCD,2BAAI,gDAAY,CAACC,KAAK,CAAC,MAAK,CAAE,CAAC,CAAC;EAClC;EAEUC,IAAIA,CAACC,QAA4B;IACzC;IACA;IACAC,UAAU,CAAC,MAAK;MACdD,QAAQ,EAAE,CAACE,IAAI,CAAC,MAAK;QACnB,IAAI,CAACC,UAAU,EAAE;QACjB,IAAI,CAACd,KAAK,CAAC,KAAK,CAAC;MACnB,CAAC,EAAEQ,2BAAI,iDAAa,CAAC;IACvB,CAAC,EAAE,CAAC,CAAC;EACP;EAEUO,kBAAkBA,CAACC,cAA8B;IACzD,IAAI,CAACC,gBAAgB,CAACC,IAAI,CAACF,cAAc,CAAC;IAC1C,IAAI,CAAChB,KAAK,CAAC,gBAAgB,EAAEgB,cAAc,CAAC;IAC5C,MAAMd,OAAO,GAAGc,cAAc,CAACG,OAAO,CAAC,CAAC,CAAC,EAAEjB,OAAO;IAClD,IAAIA,OAAO,EAAE,IAAI,CAACkB,WAAW,CAAClB,OAAqC,CAAC;IACpE,OAAOc,cAAc;EACvB;EAEUI,WAAWA,CAAClB,OAAmC,EAAEmB,IAAI,GAAG,IAAI;IACpE,IAAI,EAAE,SAAS,IAAInB,OAAO,CAAC,EAAEA,OAAO,CAACoB,OAAO,GAAG,IAAI;IAEnD,IAAI,CAACC,QAAQ,CAACL,IAAI,CAAChB,OAAO,CAAC;IAE3B,IAAImB,IAAI,EAAE;MACR,IAAI,CAACrB,KAAK,CAAC,SAAS,EAAEE,OAAO,CAAC;MAC9B,IAAI,CAACxB,iBAAiB,CAACwB,OAAO,CAAC,IAAIvB,aAAa,CAACuB,OAAO,CAAC,KAAKA,OAAO,CAACoB,OAAO,EAAE;QAC7E;QACA,IAAI,CAACtB,KAAK,CAAC,oBAAoB,EAAEE,OAAO,CAACoB,OAAiB,CAAC;OAC5D,MAAM,IAAI7C,kBAAkB,CAACyB,OAAO,CAAC,IAAIA,OAAO,CAACsB,aAAa,EAAE;QAC/D,IAAI,CAACxB,KAAK,CAAC,cAAc,EAAEE,OAAO,CAACsB,aAAa,CAAC;OAClD,MAAM,IAAI/C,kBAAkB,CAACyB,OAAO,CAAC,IAAIA,OAAO,CAACuB,UAAU,EAAE;QAC5D,KAAK,MAAMC,SAAS,IAAIxB,OAAO,CAACuB,UAAU,EAAE;UAC1C,IAAIC,SAAS,CAACC,IAAI,KAAK,UAAU,EAAE;YACjC,IAAI,CAAC3B,KAAK,CAAC,cAAc,EAAE0B,SAAS,CAACE,QAAQ,CAAC;;;;;EAKxD;EAEUC,UAAUA;IAClB,IAAI,IAAI,CAACC,KAAK,EAAE;IAChBtB,2BAAI,6DAAyB,MAA7B,IAAI,CAA2B;IAC/B,IAAI,CAACR,KAAK,CAAC,SAAS,CAAC;EACvB;EAEA,IAAI8B,KAAKA;IACP,OAAOtB,2BAAI,2CAAO;EACpB;EAEA,IAAIuB,OAAOA;IACT,OAAOvB,2BAAI,6CAAS;EACtB;EAEA,IAAIwB,OAAOA;IACT,OAAOxB,2BAAI,6CAAS;EACtB;EAEAyB,KAAKA;IACH,IAAI,CAACC,UAAU,CAACD,KAAK,EAAE;EACzB;EAEA;;;;;;;EAOAE,EAAEA,CAA6BC,KAAY,EAAEC,QAAyC;IACpF,MAAMC,SAAS,GACb9B,2BAAI,+CAAW,CAAC4B,KAAK,CAAC,KAAK5B,2BAAI,+CAAW,CAAC4B,KAAK,CAAC,GAAG,EAAE,CAAC;IACzDE,SAAS,CAACpB,IAAI,CAAC;MAAEmB;IAAQ,CAAE,CAAC;IAC5B,OAAO,IAAI;EACb;EAEA;;;;;;;EAOAE,GAAGA,CAA6BH,KAAY,EAAEC,QAAyC;IACrF,MAAMC,SAAS,GAAG9B,2BAAI,+CAAW,CAAC4B,KAAK,CAAC;IACxC,IAAI,CAACE,SAAS,EAAE,OAAO,IAAI;IAC3B,MAAME,KAAK,GAAGF,SAAS,CAACG,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACL,QAAQ,KAAKA,QAAQ,CAAC;IACjE,IAAIG,KAAK,IAAI,CAAC,EAAEF,SAAS,CAACK,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;IAC1C,OAAO,IAAI;EACb;EAEA;;;;;EAKAI,IAAIA,CAA6BR,KAAY,EAAEC,QAAyC;IACtF,MAAMC,SAAS,GACb9B,2BAAI,+CAAW,CAAC4B,KAAK,CAAC,KAAK5B,2BAAI,+CAAW,CAAC4B,KAAK,CAAC,GAAG,EAAE,CAAC;IACzDE,SAAS,CAACpB,IAAI,CAAC;MAAEmB,QAAQ;MAAEO,IAAI,EAAE;IAAI,CAAE,CAAC;IACxC,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;EAWAC,OAAOA,CACLT,KAAY;IAMZ,OAAO,IAAI/B,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACrCV,2BAAI,wDAA2B,IAAI;MACnC,IAAIuC,KAAK,KAAK,OAAO,EAAE,IAAI,CAACQ,IAAI,CAAC,OAAO,EAAErC,MAAM,CAAC;MACjD,IAAI,CAACqC,IAAI,CAACR,KAAK,EAAE9B,OAAc,CAAC;IAClC,CAAC,CAAC;EACJ;EAEA,MAAMwC,IAAIA;IACRjD,2BAAI,wDAA2B,IAAI;IACnC,MAAMW,2BAAI,gDAAY;EACxB;EAEA;;;;EAIA,MAAMuC,mBAAmBA;IACvB,MAAM,IAAI,CAACD,IAAI,EAAE;IACjB,MAAME,UAAU,GAAG,IAAI,CAAC/B,gBAAgB,CAAC,IAAI,CAACA,gBAAgB,CAACgC,MAAM,GAAG,CAAC,CAAC;IAC1E,IAAI,CAACD,UAAU,EAAE,MAAM,IAAIzE,WAAW,CAAC,iDAAiD,CAAC;IACzF,OAAOyE,UAAU;EACnB;EAMA;;;;EAIA,MAAME,YAAYA;IAChB,MAAM,IAAI,CAACJ,IAAI,EAAE;IACjB,OAAOtC,2BAAI,8FAAiB,MAArB,IAAI,CAAmB;EAChC;EAaA;;;;EAIA,MAAM2C,YAAYA;IAChB,MAAM,IAAI,CAACL,IAAI,EAAE;IACjB,OAAOtC,2BAAI,8FAAiB,MAArB,IAAI,CAAmB;EAChC;EAgBA;;;;EAIA,MAAM4C,iBAAiBA;IACrB,MAAM,IAAI,CAACN,IAAI,EAAE;IACjB,OAAOtC,2BAAI,mGAAsB,MAA1B,IAAI,CAAwB;EACrC;EAwBA,MAAM6C,uBAAuBA;IAC3B,MAAM,IAAI,CAACP,IAAI,EAAE;IACjB,OAAOtC,2BAAI,yGAA4B,MAAhC,IAAI,CAA8B;EAC3C;EAkBA,MAAM8C,UAAUA;IACd,MAAM,IAAI,CAACR,IAAI,EAAE;IACjB,OAAOtC,2BAAI,kGAAqB,MAAzB,IAAI,CAAuB;EACpC;EAEA+C,kBAAkBA;IAChB,OAAO,CAAC,GAAG,IAAI,CAACtC,gBAAgB,CAAC;EACnC;EAuBUjB,KAAKA,CAA6BoC,KAAY,EAAE,GAAGoB,IAAoC;IAC/F;IACA,IAAIhD,2BAAI,2CAAO,EAAE;MACf;;IAGF,IAAI4B,KAAK,KAAK,KAAK,EAAE;MACnBvC,2BAAI,uCAAU,IAAI;MAClBW,2BAAI,uDAAmB,MAAvB,IAAI,CAAqB;;IAG3B,MAAM8B,SAAS,GAAiD9B,2BAAI,+CAAW,CAAC4B,KAAK,CAAC;IACtF,IAAIE,SAAS,EAAE;MACb9B,2BAAI,+CAAW,CAAC4B,KAAK,CAAC,GAAGE,SAAS,CAACmB,MAAM,CAAEf,CAAC,IAAK,CAACA,CAAC,CAACE,IAAI,CAAQ;MAChEN,SAAS,CAACoB,OAAO,CAAC,CAAC;QAAErB;MAAQ,CAAO,KAAKA,QAAQ,CAAC,GAAGmB,IAAI,CAAC,CAAC;;IAG7D,IAAIpB,KAAK,KAAK,OAAO,EAAE;MACrB,MAAMxC,KAAK,GAAG4D,IAAI,CAAC,CAAC,CAAsB;MAC1C,IAAI,CAAChD,2BAAI,4DAAwB,IAAI,CAAC8B,SAAS,EAAEW,MAAM,EAAE;QACvD5C,OAAO,CAACE,MAAM,CAACX,KAAK,CAAC;;MAEvBY,2BAAI,4DAAwB,MAA5B,IAAI,EAAyBZ,KAAK,CAAC;MACnCY,2BAAI,sDAAkB,MAAtB,IAAI,EAAmBZ,KAAK,CAAC;MAC7B,IAAI,CAACI,KAAK,CAAC,KAAK,CAAC;MACjB;;IAGF,IAAIoC,KAAK,KAAK,OAAO,EAAE;MACrB;MAEA,MAAMxC,KAAK,GAAG4D,IAAI,CAAC,CAAC,CAAgB;MACpC,IAAI,CAAChD,2BAAI,4DAAwB,IAAI,CAAC8B,SAAS,EAAEW,MAAM,EAAE;QACvD;QACA;QACA;QACA;QACA;QACA;QACA5C,OAAO,CAACE,MAAM,CAACX,KAAK,CAAC;;MAEvBY,2BAAI,4DAAwB,MAA5B,IAAI,EAAyBZ,KAAK,CAAC;MACnCY,2BAAI,sDAAkB,MAAtB,IAAI,EAAmBZ,KAAK,CAAC;MAC7B,IAAI,CAACI,KAAK,CAAC,KAAK,CAAC;;EAErB;EAEUc,UAAUA;IAClB,MAAMkC,UAAU,GAAG,IAAI,CAAC/B,gBAAgB,CAAC,IAAI,CAACA,gBAAgB,CAACgC,MAAM,GAAG,CAAC,CAAC;IAC1E,IAAID,UAAU,EAAE,IAAI,CAAChD,KAAK,CAAC,qBAAqB,EAAEgD,UAAU,CAAC;IAC7D,MAAMG,YAAY,GAAG3C,2BAAI,8FAAiB,MAArB,IAAI,CAAmB;IAC5C,IAAI2C,YAAY,EAAE,IAAI,CAACnD,KAAK,CAAC,cAAc,EAAEmD,YAAY,CAAC;IAC1D,MAAMD,YAAY,GAAG1C,2BAAI,8FAAiB,MAArB,IAAI,CAAmB;IAC5C,IAAI0C,YAAY,EAAE,IAAI,CAAClD,KAAK,CAAC,cAAc,EAAEkD,YAAY,CAAC;IAE1D,MAAME,iBAAiB,GAAG5C,2BAAI,mGAAsB,MAA1B,IAAI,CAAwB;IACtD,IAAI4C,iBAAiB,EAAE,IAAI,CAACpD,KAAK,CAAC,mBAAmB,EAAEoD,iBAAiB,CAAC;IAEzE,MAAMC,uBAAuB,GAAG7C,2BAAI,yGAA4B,MAAhC,IAAI,CAA8B;IAClE,IAAI6C,uBAAuB,IAAI,IAAI,EAAE,IAAI,CAACrD,KAAK,CAAC,yBAAyB,EAAEqD,uBAAuB,CAAC;IAEnG,IAAI,IAAI,CAACpC,gBAAgB,CAAC0C,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,KAAK,CAAC,EAAE;MAC9C,IAAI,CAAC7D,KAAK,CAAC,YAAY,EAAEQ,2BAAI,kGAAqB,MAAzB,IAAI,CAAuB,CAAC;;EAEzD;EAUU,MAAMsD,qBAAqBA,CACnCC,WAAwB,EACxBC,MAAkC,EAClCC,OAA6B;IAE7B,MAAMC,MAAM,GAAGD,OAAO,EAAEC,MAAM;IAC9B,IAAIA,MAAM,EAAE;MACV,IAAIA,MAAM,CAAClC,OAAO,EAAE,IAAI,CAACE,UAAU,CAACD,KAAK,EAAE;MAC3CiC,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAM,IAAI,CAACjC,UAAU,CAACD,KAAK,EAAE,CAAC;;IAEjEzB,2BAAI,6FAAgB,MAApB,IAAI,EAAiBwD,MAAM,CAAC;IAE5B,MAAMhD,cAAc,GAAG,MAAM+C,WAAW,CAACK,MAAM,CAC7C;MAAE,GAAGJ,MAAM;MAAEK,MAAM,EAAE;IAAK,CAAE,EAC5B;MAAE,GAAGJ,OAAO;MAAEC,MAAM,EAAE,IAAI,CAAChC,UAAU,CAACgC;IAAM,CAAE,CAC/C;IACD,IAAI,CAACrC,UAAU,EAAE;IACjB,OAAO,IAAI,CAACd,kBAAkB,CAACC,cAAc,CAAC;EAChD;EAEU,MAAMsD,kBAAkBA,CAChCP,WAAwB,EACxBC,MAAkC,EAClCC,OAA6B;IAE7B,KAAK,MAAM/D,OAAO,IAAI8D,MAAM,CAACzC,QAAQ,EAAE;MACrC,IAAI,CAACH,WAAW,CAAClB,OAAO,EAAE,KAAK,CAAC;;IAElC,OAAO,MAAM,IAAI,CAAC4D,qBAAqB,CAACC,WAAW,EAAEC,MAAM,EAAEC,OAAO,CAAC;EACvE;EAEU,MAAMM,aAAaA,CAC3BR,WAAwB,EACxBC,MAE8D,EAC9DC,OAAuB;IAEvB,MAAMO,IAAI,GAAG,UAAmB;IAChC,MAAM;MAAEhD,aAAa,GAAG,MAAM;MAAE6C,MAAM;MAAE,GAAGI;IAAU,CAAE,GAAGT,MAAM;IAChE,MAAMU,oBAAoB,GAAG,OAAOlD,aAAa,KAAK,QAAQ,IAAIA,aAAa,EAAEzB,IAAI;IACrF,MAAM;MAAE4E,kBAAkB,GAAG/F;IAA4B,CAAE,GAAGqF,OAAO,IAAI,EAAE;IAE3E,MAAMW,eAAe,GAA0C,EAAE;IACjE,KAAK,MAAMC,CAAC,IAAIb,MAAM,CAACc,SAAS,EAAE;MAChCF,eAAe,CAACC,CAAC,CAAC9E,IAAI,IAAI8E,CAAC,CAACjD,QAAQ,CAAC7B,IAAI,CAAC,GAAG8E,CAAC;;IAGhD,MAAMC,SAAS,GAA0Cd,MAAM,CAACc,SAAS,CAACC,GAAG,CAC1EF,CAAC,KAA2C;MAC3C9E,IAAI,EAAE8E,CAAC,CAAC9E,IAAI,IAAI8E,CAAC,CAACjD,QAAQ,CAAC7B,IAAI;MAC/BiF,UAAU,EAAEH,CAAC,CAACG,UAAqC;MACnDC,WAAW,EAAEJ,CAAC,CAACI;KAChB,CAAC,CACH;IAED,KAAK,MAAM/E,OAAO,IAAI8D,MAAM,CAACzC,QAAQ,EAAE;MACrC,IAAI,CAACH,WAAW,CAAClB,OAAO,EAAE,KAAK,CAAC;;IAGlC,KAAK,IAAIgF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,kBAAkB,EAAE,EAAEO,CAAC,EAAE;MAC3C,MAAMlE,cAAc,GAAmB,MAAM,IAAI,CAAC8C,qBAAqB,CACrEC,WAAW,EACX;QACE,GAAGU,UAAU;QACbjD,aAAa;QACbsD,SAAS;QACTvD,QAAQ,EAAE,CAAC,GAAG,IAAI,CAACA,QAAQ;OAC5B,EACD0C,OAAO,CACR;MACD,MAAM/D,OAAO,GAAGc,cAAc,CAACG,OAAO,CAAC,CAAC,CAAC,EAAEjB,OAAO;MAClD,IAAI,CAACA,OAAO,EAAE;QACZ,MAAM,IAAI3B,WAAW,CAAC,4CAA4C,CAAC;;MAErE,IAAI,CAAC2B,OAAO,CAACsB,aAAa,EAAE;MAC5B,MAAM;QAAEzB,IAAI;QAAEoF,SAAS,EAAE3B;MAAI,CAAE,GAAGtD,OAAO,CAACsB,aAAa;MACvD,MAAM4D,EAAE,GAAGR,eAAe,CAAC7E,IAAI,CAAC;MAChC,IAAI,CAACqF,EAAE,EAAE;QACP,MAAM9D,OAAO,GAAG,0BAA0B+D,IAAI,CAACC,SAAS,CAACvF,IAAI,CAAC,4BAA4B+E,SAAS,CAChGC,GAAG,CAAEF,CAAC,IAAKQ,IAAI,CAACC,SAAS,CAACT,CAAC,CAAC9E,IAAI,CAAC,CAAC,CAClCwF,IAAI,CAAC,IAAI,CAAC,oBAAoB;QAEjC,IAAI,CAACnE,WAAW,CAAC;UAAEoD,IAAI;UAAEzE,IAAI;UAAEuB;QAAO,CAAE,CAAC;QACzC;OACD,MAAM,IAAIoD,oBAAoB,IAAIA,oBAAoB,KAAK3E,IAAI,EAAE;QAChE,MAAMuB,OAAO,GAAG,0BAA0B+D,IAAI,CAACC,SAAS,CAACvF,IAAI,CAAC,KAAKsF,IAAI,CAACC,SAAS,CAC/EZ,oBAAoB,CACrB,8BAA8B;QAE/B,IAAI,CAACtD,WAAW,CAAC;UAAEoD,IAAI;UAAEzE,IAAI;UAAEuB;QAAO,CAAE,CAAC;QACzC;;MAGF,IAAIkE,MAAM;MACV,IAAI;QACFA,MAAM,GAAGhH,2BAA2B,CAAC4G,EAAE,CAAC,GAAG,MAAMA,EAAE,CAACK,KAAK,CAACjC,IAAI,CAAC,GAAGA,IAAI;OACvE,CAAC,OAAO5D,KAAK,EAAE;QACd,IAAI,CAACwB,WAAW,CAAC;UACfoD,IAAI;UACJzE,IAAI;UACJuB,OAAO,EAAE1B,KAAK,YAAYE,KAAK,GAAGF,KAAK,CAACM,OAAO,GAAGE,MAAM,CAACR,KAAK;SAC/D,CAAC;QACF;;MAGF;MACA,MAAM8F,UAAU,GAAG,MAAMN,EAAE,CAACxD,QAAQ,CAAC4D,MAAM,EAAE,IAAI,CAAC;MAClD,MAAMlE,OAAO,GAAGd,2BAAI,0GAA6B,MAAjC,IAAI,EAA8BkF,UAAU,CAAC;MAE7D,IAAI,CAACtE,WAAW,CAAC;QAAEoD,IAAI;QAAEzE,IAAI;QAAEuB;MAAO,CAAE,CAAC;MAEzC,IAAIoD,oBAAoB,EAAE;;EAE9B;EAEU,MAAMiB,SAASA,CACvB5B,WAAwB,EACxBC,MAE0D,EAC1DC,OAAuB;IAEvB,MAAMO,IAAI,GAAG,MAAe;IAC5B,MAAM;MAAEoB,WAAW,GAAG,MAAM;MAAEvB,MAAM;MAAE,GAAGI;IAAU,CAAE,GAAGT,MAAM;IAC9D,MAAMU,oBAAoB,GAAG,OAAOkB,WAAW,KAAK,QAAQ,IAAIA,WAAW,EAAEhE,QAAQ,EAAE7B,IAAI;IAC3F,MAAM;MAAE4E,kBAAkB,GAAG/F;IAA4B,CAAE,GAAGqF,OAAO,IAAI,EAAE;IAE3E,MAAMW,eAAe,GAA0C,EAAE;IACjE,KAAK,MAAMC,CAAC,IAAIb,MAAM,CAAC6B,KAAK,EAAE;MAC5B,IAAIhB,CAAC,CAAClD,IAAI,KAAK,UAAU,EAAE;QACzBiD,eAAe,CAACC,CAAC,CAACjD,QAAQ,CAAC7B,IAAI,IAAI8E,CAAC,CAACjD,QAAQ,CAACA,QAAQ,CAAC7B,IAAI,CAAC,GAAG8E,CAAC,CAACjD,QAAQ;;;IAI7E,MAAMiE,KAAK,GACT,OAAO,IAAI7B,MAAM,GACfA,MAAM,CAAC6B,KAAK,CAACd,GAAG,CAAEe,CAAC,IACjBA,CAAC,CAACnE,IAAI,KAAK,UAAU,GACnB;MACEA,IAAI,EAAE,UAAU;MAChBC,QAAQ,EAAE;QACR7B,IAAI,EAAE+F,CAAC,CAAClE,QAAQ,CAAC7B,IAAI,IAAI+F,CAAC,CAAClE,QAAQ,CAACA,QAAQ,CAAC7B,IAAI;QACjDiF,UAAU,EAAEc,CAAC,CAAClE,QAAQ,CAACoD,UAAqC;QAC5DC,WAAW,EAAEa,CAAC,CAAClE,QAAQ,CAACqD;;KAE3B,GACAa,CAAmC,CACvC,GACAC,SAAiB;IAEtB,KAAK,MAAM7F,OAAO,IAAI8D,MAAM,CAACzC,QAAQ,EAAE;MACrC,IAAI,CAACH,WAAW,CAAClB,OAAO,EAAE,KAAK,CAAC;;IAGlC,KAAK,IAAIgF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,kBAAkB,EAAE,EAAEO,CAAC,EAAE;MAC3C,MAAMlE,cAAc,GAAmB,MAAM,IAAI,CAAC8C,qBAAqB,CACrEC,WAAW,EACX;QACE,GAAGU,UAAU;QACbmB,WAAW;QACXC,KAAK;QACLtE,QAAQ,EAAE,CAAC,GAAG,IAAI,CAACA,QAAQ;OAC5B,EACD0C,OAAO,CACR;MACD,MAAM/D,OAAO,GAAGc,cAAc,CAACG,OAAO,CAAC,CAAC,CAAC,EAAEjB,OAAO;MAClD,IAAI,CAACA,OAAO,EAAE;QACZ,MAAM,IAAI3B,WAAW,CAAC,4CAA4C,CAAC;;MAErE,IAAI,CAAC2B,OAAO,CAACuB,UAAU,EAAE;QACvB;;MAGF,KAAK,MAAMC,SAAS,IAAIxB,OAAO,CAACuB,UAAU,EAAE;QAC1C,IAAIC,SAAS,CAACC,IAAI,KAAK,UAAU,EAAE;QACnC,MAAMqE,YAAY,GAAGtE,SAAS,CAACuE,EAAE;QACjC,MAAM;UAAElG,IAAI;UAAEoF,SAAS,EAAE3B;QAAI,CAAE,GAAG9B,SAAS,CAACE,QAAQ;QACpD,MAAMwD,EAAE,GAAGR,eAAe,CAAC7E,IAAI,CAAC;QAEhC,IAAI,CAACqF,EAAE,EAAE;UACP,MAAM9D,OAAO,GAAG,sBAAsB+D,IAAI,CAACC,SAAS,CAACvF,IAAI,CAAC,4BAA4B8F,KAAK,CACxFd,GAAG,CAAEF,CAAC,IAAKQ,IAAI,CAACC,SAAS,CAACT,CAAC,CAACjD,QAAQ,CAAC7B,IAAI,CAAC,CAAC,CAC3CwF,IAAI,CAAC,IAAI,CAAC,oBAAoB;UAEjC,IAAI,CAACnE,WAAW,CAAC;YAAEoD,IAAI;YAAEwB,YAAY;YAAE1E;UAAO,CAAE,CAAC;UACjD;SACD,MAAM,IAAIoD,oBAAoB,IAAIA,oBAAoB,KAAK3E,IAAI,EAAE;UAChE,MAAMuB,OAAO,GAAG,sBAAsB+D,IAAI,CAACC,SAAS,CAACvF,IAAI,CAAC,KAAKsF,IAAI,CAACC,SAAS,CAC3EZ,oBAAoB,CACrB,8BAA8B;UAE/B,IAAI,CAACtD,WAAW,CAAC;YAAEoD,IAAI;YAAEwB,YAAY;YAAE1E;UAAO,CAAE,CAAC;UACjD;;QAGF,IAAIkE,MAAM;QACV,IAAI;UACFA,MAAM,GAAGhH,2BAA2B,CAAC4G,EAAE,CAAC,GAAG,MAAMA,EAAE,CAACK,KAAK,CAACjC,IAAI,CAAC,GAAGA,IAAI;SACvE,CAAC,OAAO5D,KAAK,EAAE;UACd,MAAM0B,OAAO,GAAG1B,KAAK,YAAYE,KAAK,GAAGF,KAAK,CAACM,OAAO,GAAGE,MAAM,CAACR,KAAK,CAAC;UACtE,IAAI,CAACwB,WAAW,CAAC;YAAEoD,IAAI;YAAEwB,YAAY;YAAE1E;UAAO,CAAE,CAAC;UACjD;;QAGF;QACA,MAAMoE,UAAU,GAAG,MAAMN,EAAE,CAACxD,QAAQ,CAAC4D,MAAM,EAAE,IAAI,CAAC;QAClD,MAAMlE,OAAO,GAAGd,2BAAI,0GAA6B,MAAjC,IAAI,EAA8BkF,UAAU,CAAC;QAC7D,IAAI,CAACtE,WAAW,CAAC;UAAEoD,IAAI;UAAEwB,YAAY;UAAE1E;QAAO,CAAE,CAAC;QAEjD,IAAIoD,oBAAoB,EAAE;UACxB;;;;IAKN;EACF;;;EAnaE,OAAOlE,2BAAI,8FAAiB,MAArB,IAAI,CAAmB,CAACc,OAAO,IAAI,IAAI;AAChD,CAAC;EAYC,IAAI4D,CAAC,GAAG,IAAI,CAAC3D,QAAQ,CAAC0B,MAAM;EAC5B,OAAOiC,CAAC,EAAE,GAAG,CAAC,EAAE;IACd,MAAMhF,OAAO,GAAG,IAAI,CAACqB,QAAQ,CAAC2D,CAAC,CAAC;IAChC,IAAIzG,kBAAkB,CAACyB,OAAO,CAAC,EAAE;MAC/B,OAAO;QAAE,GAAGA,OAAO;QAAEoB,OAAO,EAAEpB,OAAO,CAACoB,OAAO,IAAI;MAAI,CAAE;;;EAG3D,MAAM,IAAI/C,WAAW,CAAC,4EAA4E,CAAC;AACrG,CAAC;EAYC,KAAK,IAAI2G,CAAC,GAAG,IAAI,CAAC3D,QAAQ,CAAC0B,MAAM,GAAG,CAAC,EAAEiC,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAClD,MAAMhF,OAAO,GAAG,IAAI,CAACqB,QAAQ,CAAC2D,CAAC,CAAC;IAChC,IAAIzG,kBAAkB,CAACyB,OAAO,CAAC,IAAIA,OAAO,EAAEsB,aAAa,EAAE;MACzD,OAAOtB,OAAO,CAACsB,aAAa;;IAE9B,IAAI/C,kBAAkB,CAACyB,OAAO,CAAC,IAAIA,OAAO,EAAEuB,UAAU,EAAEwB,MAAM,EAAE;MAC9D,OAAO/C,OAAO,CAACuB,UAAU,CAACyE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAEtE,QAAQ;;;EAI9C;AACF,CAAC;EAYC,KAAK,IAAIsD,CAAC,GAAG,IAAI,CAAC3D,QAAQ,CAAC0B,MAAM,GAAG,CAAC,EAAEiC,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAClD,MAAMhF,OAAO,GAAG,IAAI,CAACqB,QAAQ,CAAC2D,CAAC,CAAC;IAChC,IAAIxG,iBAAiB,CAACwB,OAAO,CAAC,IAAIA,OAAO,CAACoB,OAAO,IAAI,IAAI,EAAE;MACzD,OAAOpB,OAAO,CAACoB,OAAO;;IAExB,IACE3C,aAAa,CAACuB,OAAO,CAAC,IACtBA,OAAO,CAACoB,OAAO,IAAI,IAAI,IACvB,IAAI,CAACC,QAAQ,CAACoC,IAAI,CACfwC,CAAC,IACAA,CAAC,CAAC3B,IAAI,KAAK,WAAW,IACtB2B,CAAC,CAAC1E,UAAU,EAAEkC,IAAI,CAAEyC,CAAC,IAAKA,CAAC,CAACzE,IAAI,KAAK,UAAU,IAAIyE,CAAC,CAACH,EAAE,KAAK/F,OAAO,CAAC8F,YAAY,CAAC,CACpF,EACD;MACA,OAAO9F,OAAO,CAACoB,OAAO;;;EAI1B;AACF,CAAC;EAQC,MAAM+E,KAAK,GAAoB;IAC7BC,iBAAiB,EAAE,CAAC;IACpBC,aAAa,EAAE,CAAC;IAChBC,YAAY,EAAE;GACf;EACD,KAAK,MAAM;IAAE3C;EAAK,CAAE,IAAI,IAAI,CAAC5C,gBAAgB,EAAE;IAC7C,IAAI4C,KAAK,EAAE;MACTwC,KAAK,CAACC,iBAAiB,IAAIzC,KAAK,CAACyC,iBAAiB;MAClDD,KAAK,CAACE,aAAa,IAAI1C,KAAK,CAAC0C,aAAa;MAC1CF,KAAK,CAACG,YAAY,IAAI3C,KAAK,CAAC2C,YAAY;;;EAG5C,OAAOH,KAAK;AACd,CAAC,uGAkGerC,MAAkC;EAChD,IAAIA,MAAM,CAACyC,CAAC,IAAI,IAAI,IAAIzC,MAAM,CAACyC,CAAC,GAAG,CAAC,EAAE;IACpC,MAAM,IAAIlI,WAAW,CACnB,8HAA8H,CAC/H;;AAEL,CAAC,iIA6N4BmH,UAAmB;EAC9C,OACE,OAAOA,UAAU,KAAK,QAAQ,GAAGA,UAAU,GACzCA,UAAU,KAAKK,SAAS,GAAG,WAAW,GACtCV,IAAI,CAACC,SAAS,CAACI,UAAU,CAAC;AAEhC,CAAC","names":["APIUserAbortError","OpenAIError","isRunnableFunctionWithParse","isAssistantMessage","isFunctionMessage","isToolMessage","DEFAULT_MAX_CHAT_COMPLETIONS","AbstractChatCompletionRunner","constructor","AbortController","_AbstractChatCompletionRunner_connectedPromise","_AbstractChatCompletionRunner_resolveConnectedPromise","_AbstractChatCompletionRunner_rejectConnectedPromise","_AbstractChatCompletionRunner_endPromise","_AbstractChatCompletionRunner_resolveEndPromise","_AbstractChatCompletionRunner_rejectEndPromise","_AbstractChatCompletionRunner_listeners","_AbstractChatCompletionRunner_ended","_AbstractChatCompletionRunner_errored","_AbstractChatCompletionRunner_aborted","_AbstractChatCompletionRunner_catchingPromiseCreated","_AbstractChatCompletionRunner_handleError","error","__classPrivateFieldSet","Error","name","_emit","openAIError","message","cause","String","Promise","resolve","reject","__classPrivateFieldGet","catch","_run","executor","setTimeout","then","_emitFinal","_addChatCompletion","chatCompletion","_chatCompletions","push","choices","_addMessage","emit","content","messages","function_call","tool_calls","tool_call","type","function","_connected","ended","errored","aborted","abort","controller","on","event","listener","listeners","off","index","findIndex","l","splice","once","emitted","done","finalChatCompletion","completion","length","finalContent","finalMessage","finalFunctionCall","finalFunctionCallResult","totalUsage","allChatCompletions","args","filter","forEach","some","c","usage","_createChatCompletion","completions","params","options","signal","addEventListener","create","stream","_runChatCompletion","_runFunctions","role","restParams","singleFunctionToCall","maxChatCompletions","functionsByName","f","functions","map","parameters","description","i","arguments","fn","JSON","stringify","join","parsed","parse","rawContent","_runTools","tool_choice","tools","t","undefined","tool_call_id","id","at","x","y","total","completion_tokens","prompt_tokens","total_tokens","n"],"sources":["/Users/sarrasassi/my-app/face-recognition-brain-2/node_modules/openai/src/lib/AbstractChatCompletionRunner.ts"],"sourcesContent":["import * as Core from \"../core\";\nimport { type CompletionUsage } from \"../resources/completions\";\nimport {\n  type Completions,\n  type ChatCompletion,\n  type ChatCompletionMessage,\n  type ChatCompletionMessageParam,\n  type ChatCompletionCreateParams,\n  type ChatCompletionTool,\n} from \"../resources/chat/completions\";\nimport { APIUserAbortError, OpenAIError } from \"../error\";\nimport {\n  type RunnableFunction,\n  isRunnableFunctionWithParse,\n  type BaseFunctionsArgs,\n} from './RunnableFunction';\nimport { ChatCompletionFunctionRunnerParams, ChatCompletionToolRunnerParams } from './ChatCompletionRunner';\nimport {\n  ChatCompletionStreamingFunctionRunnerParams,\n  ChatCompletionStreamingToolRunnerParams,\n} from './ChatCompletionStreamingRunner';\nimport { isAssistantMessage, isFunctionMessage, isToolMessage } from './chatCompletionUtils';\n\nconst DEFAULT_MAX_CHAT_COMPLETIONS = 10;\nexport interface RunnerOptions extends Core.RequestOptions {\n  /** How many requests to make before canceling. Default 10. */\n  maxChatCompletions?: number;\n}\n\nexport abstract class AbstractChatCompletionRunner<\n  Events extends CustomEvents<any> = AbstractChatCompletionRunnerEvents,\n> {\n  controller: AbortController = new AbortController();\n\n  #connectedPromise: Promise<void>;\n  #resolveConnectedPromise: () => void = () => {};\n  #rejectConnectedPromise: (error: OpenAIError) => void = () => {};\n\n  #endPromise: Promise<void>;\n  #resolveEndPromise: () => void = () => {};\n  #rejectEndPromise: (error: OpenAIError) => void = () => {};\n\n  #listeners: { [Event in keyof Events]?: ListenersForEvent<Events, Event> } = {};\n\n  protected _chatCompletions: ChatCompletion[] = [];\n  messages: ChatCompletionMessageParam[] = [];\n\n  #ended = false;\n  #errored = false;\n  #aborted = false;\n  #catchingPromiseCreated = false;\n\n  constructor() {\n    this.#connectedPromise = new Promise<void>((resolve, reject) => {\n      this.#resolveConnectedPromise = resolve;\n      this.#rejectConnectedPromise = reject;\n    });\n\n    this.#endPromise = new Promise<void>((resolve, reject) => {\n      this.#resolveEndPromise = resolve;\n      this.#rejectEndPromise = reject;\n    });\n\n    // Don't let these promises cause unhandled rejection errors.\n    // we will manually cause an unhandled rejection error later\n    // if the user hasn't registered any error listener or called\n    // any promise-returning method.\n    this.#connectedPromise.catch(() => {});\n    this.#endPromise.catch(() => {});\n  }\n\n  protected _run(executor: () => Promise<any>) {\n    // Unfortunately if we call `executor()` immediately we get runtime errors about\n    // references to `this` before the `super()` constructor call returns.\n    setTimeout(() => {\n      executor().then(() => {\n        this._emitFinal();\n        this._emit('end');\n      }, this.#handleError);\n    }, 0);\n  }\n\n  protected _addChatCompletion(chatCompletion: ChatCompletion): ChatCompletion {\n    this._chatCompletions.push(chatCompletion);\n    this._emit('chatCompletion', chatCompletion);\n    const message = chatCompletion.choices[0]?.message;\n    if (message) this._addMessage(message as ChatCompletionMessageParam);\n    return chatCompletion;\n  }\n\n  protected _addMessage(message: ChatCompletionMessageParam, emit = true) {\n    if (!('content' in message)) message.content = null;\n\n    this.messages.push(message);\n\n    if (emit) {\n      this._emit('message', message);\n      if ((isFunctionMessage(message) || isToolMessage(message)) && message.content) {\n        // Note, this assumes that {role: 'tool', content: â€¦} is always the result of a call of tool of type=function.\n        this._emit('functionCallResult', message.content as string);\n      } else if (isAssistantMessage(message) && message.function_call) {\n        this._emit('functionCall', message.function_call);\n      } else if (isAssistantMessage(message) && message.tool_calls) {\n        for (const tool_call of message.tool_calls) {\n          if (tool_call.type === 'function') {\n            this._emit('functionCall', tool_call.function);\n          }\n        }\n      }\n    }\n  }\n\n  protected _connected() {\n    if (this.ended) return;\n    this.#resolveConnectedPromise();\n    this._emit('connect');\n  }\n\n  get ended(): boolean {\n    return this.#ended;\n  }\n\n  get errored(): boolean {\n    return this.#errored;\n  }\n\n  get aborted(): boolean {\n    return this.#aborted;\n  }\n\n  abort() {\n    this.controller.abort();\n  }\n\n  /**\n   * Adds the listener function to the end of the listeners array for the event.\n   * No checks are made to see if the listener has already been added. Multiple calls passing\n   * the same combination of event and listener will result in the listener being added, and\n   * called, multiple times.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  on<Event extends keyof Events>(event: Event, listener: ListenerForEvent<Events, Event>): this {\n    const listeners: ListenersForEvent<Events, Event> =\n      this.#listeners[event] || (this.#listeners[event] = []);\n    listeners.push({ listener });\n    return this;\n  }\n\n  /**\n   * Removes the specified listener from the listener array for the event.\n   * off() will remove, at most, one instance of a listener from the listener array. If any single\n   * listener has been added multiple times to the listener array for the specified event, then\n   * off() must be called multiple times to remove each instance.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  off<Event extends keyof Events>(event: Event, listener: ListenerForEvent<Events, Event>): this {\n    const listeners = this.#listeners[event];\n    if (!listeners) return this;\n    const index = listeners.findIndex((l) => l.listener === listener);\n    if (index >= 0) listeners.splice(index, 1);\n    return this;\n  }\n\n  /**\n   * Adds a one-time listener function for the event. The next time the event is triggered,\n   * this listener is removed and then invoked.\n   * @returns this ChatCompletionStream, so that calls can be chained\n   */\n  once<Event extends keyof Events>(event: Event, listener: ListenerForEvent<Events, Event>): this {\n    const listeners: ListenersForEvent<Events, Event> =\n      this.#listeners[event] || (this.#listeners[event] = []);\n    listeners.push({ listener, once: true });\n    return this;\n  }\n\n  /**\n   * This is similar to `.once()`, but returns a Promise that resolves the next time\n   * the event is triggered, instead of calling a listener callback.\n   * @returns a Promise that resolves the next time given event is triggered,\n   * or rejects if an error is emitted.  (If you request the 'error' event,\n   * returns a promise that resolves with the error).\n   *\n   * Example:\n   *\n   *   const message = await stream.emitted('message') // rejects if the stream errors\n   */\n  emitted<Event extends keyof Events>(\n    event: Event,\n  ): Promise<\n    EventParameters<Events, Event> extends [infer Param] ? Param\n    : EventParameters<Events, Event> extends [] ? void\n    : EventParameters<Events, Event>\n  > {\n    return new Promise((resolve, reject) => {\n      this.#catchingPromiseCreated = true;\n      if (event !== 'error') this.once('error', reject);\n      this.once(event, resolve as any);\n    });\n  }\n\n  async done(): Promise<void> {\n    this.#catchingPromiseCreated = true;\n    await this.#endPromise;\n  }\n\n  /**\n   * @returns a promise that resolves with the final ChatCompletion, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n   */\n  async finalChatCompletion(): Promise<ChatCompletion> {\n    await this.done();\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (!completion) throw new OpenAIError('stream ended without producing a ChatCompletion');\n    return completion;\n  }\n\n  #getFinalContent(): string | null {\n    return this.#getFinalMessage().content ?? null;\n  }\n\n  /**\n   * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalContent(): Promise<string | null> {\n    await this.done();\n    return this.#getFinalContent();\n  }\n\n  #getFinalMessage(): ChatCompletionMessage {\n    let i = this.messages.length;\n    while (i-- > 0) {\n      const message = this.messages[i];\n      if (isAssistantMessage(message)) {\n        return { ...message, content: message.content ?? null };\n      }\n    }\n    throw new OpenAIError('stream ended without producing a ChatCompletionMessage with role=assistant');\n  }\n\n  /**\n   * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\n   * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalMessage(): Promise<ChatCompletionMessage> {\n    await this.done();\n    return this.#getFinalMessage();\n  }\n\n  #getFinalFunctionCall(): ChatCompletionMessage.FunctionCall | undefined {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n      const message = this.messages[i];\n      if (isAssistantMessage(message) && message?.function_call) {\n        return message.function_call;\n      }\n      if (isAssistantMessage(message) && message?.tool_calls?.length) {\n        return message.tool_calls.at(-1)?.function;\n      }\n    }\n\n    return;\n  }\n\n  /**\n   * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalFunctionCall(): Promise<ChatCompletionMessage.FunctionCall | undefined> {\n    await this.done();\n    return this.#getFinalFunctionCall();\n  }\n\n  #getFinalFunctionCallResult(): string | undefined {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n      const message = this.messages[i];\n      if (isFunctionMessage(message) && message.content != null) {\n        return message.content;\n      }\n      if (\n        isToolMessage(message) &&\n        message.content != null &&\n        this.messages.some(\n          (x) =>\n            x.role === 'assistant' &&\n            x.tool_calls?.some((y) => y.type === 'function' && y.id === message.tool_call_id),\n        )\n      ) {\n        return message.content;\n      }\n    }\n\n    return;\n  }\n\n  async finalFunctionCallResult(): Promise<string | undefined> {\n    await this.done();\n    return this.#getFinalFunctionCallResult();\n  }\n\n  #calculateTotalUsage(): CompletionUsage {\n    const total: CompletionUsage = {\n      completion_tokens: 0,\n      prompt_tokens: 0,\n      total_tokens: 0,\n    };\n    for (const { usage } of this._chatCompletions) {\n      if (usage) {\n        total.completion_tokens += usage.completion_tokens;\n        total.prompt_tokens += usage.prompt_tokens;\n        total.total_tokens += usage.total_tokens;\n      }\n    }\n    return total;\n  }\n\n  async totalUsage(): Promise<CompletionUsage> {\n    await this.done();\n    return this.#calculateTotalUsage();\n  }\n\n  allChatCompletions(): ChatCompletion[] {\n    return [...this._chatCompletions];\n  }\n\n  #handleError = (error: unknown) => {\n    this.#errored = true;\n    if (error instanceof Error && error.name === 'AbortError') {\n      error = new APIUserAbortError();\n    }\n    if (error instanceof APIUserAbortError) {\n      this.#aborted = true;\n      return this._emit('abort', error);\n    }\n    if (error instanceof OpenAIError) {\n      return this._emit('error', error);\n    }\n    if (error instanceof Error) {\n      const openAIError: OpenAIError = new OpenAIError(error.message);\n      // @ts-ignore\n      openAIError.cause = error;\n      return this._emit('error', openAIError);\n    }\n    return this._emit('error', new OpenAIError(String(error)));\n  };\n\n  protected _emit<Event extends keyof Events>(event: Event, ...args: EventParameters<Events, Event>) {\n    // make sure we don't emit any events after end\n    if (this.#ended) {\n      return;\n    }\n\n    if (event === 'end') {\n      this.#ended = true;\n      this.#resolveEndPromise();\n    }\n\n    const listeners: ListenersForEvent<Events, Event> | undefined = this.#listeners[event];\n    if (listeners) {\n      this.#listeners[event] = listeners.filter((l) => !l.once) as any;\n      listeners.forEach(({ listener }: any) => listener(...args));\n    }\n\n    if (event === 'abort') {\n      const error = args[0] as APIUserAbortError;\n      if (!this.#catchingPromiseCreated && !listeners?.length) {\n        Promise.reject(error);\n      }\n      this.#rejectConnectedPromise(error);\n      this.#rejectEndPromise(error);\n      this._emit('end');\n      return;\n    }\n\n    if (event === 'error') {\n      // NOTE: _emit('error', error) should only be called from #handleError().\n\n      const error = args[0] as OpenAIError;\n      if (!this.#catchingPromiseCreated && !listeners?.length) {\n        // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n        // If you are seeing stack traces here, make sure to handle errors via either:\n        // - runner.on('error', () => ...)\n        // - await runner.done()\n        // - await runner.finalChatCompletion()\n        // - etc.\n        Promise.reject(error);\n      }\n      this.#rejectConnectedPromise(error);\n      this.#rejectEndPromise(error);\n      this._emit('end');\n    }\n  }\n\n  protected _emitFinal() {\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (completion) this._emit('finalChatCompletion', completion);\n    const finalMessage = this.#getFinalMessage();\n    if (finalMessage) this._emit('finalMessage', finalMessage);\n    const finalContent = this.#getFinalContent();\n    if (finalContent) this._emit('finalContent', finalContent);\n\n    const finalFunctionCall = this.#getFinalFunctionCall();\n    if (finalFunctionCall) this._emit('finalFunctionCall', finalFunctionCall);\n\n    const finalFunctionCallResult = this.#getFinalFunctionCallResult();\n    if (finalFunctionCallResult != null) this._emit('finalFunctionCallResult', finalFunctionCallResult);\n\n    if (this._chatCompletions.some((c) => c.usage)) {\n      this._emit('totalUsage', this.#calculateTotalUsage());\n    }\n  }\n\n  #validateParams(params: ChatCompletionCreateParams): void {\n    if (params.n != null && params.n > 1) {\n      throw new OpenAIError(\n        'ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.',\n      );\n    }\n  }\n\n  protected async _createChatCompletion(\n    completions: Completions,\n    params: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): Promise<ChatCompletion> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this.#validateParams(params);\n\n    const chatCompletion = await completions.create(\n      { ...params, stream: false },\n      { ...options, signal: this.controller.signal },\n    );\n    this._connected();\n    return this._addChatCompletion(chatCompletion);\n  }\n\n  protected async _runChatCompletion(\n    completions: Completions,\n    params: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): Promise<ChatCompletion> {\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n    return await this._createChatCompletion(completions, params, options);\n  }\n\n  protected async _runFunctions<FunctionsArgs extends BaseFunctionsArgs>(\n    completions: Completions,\n    params:\n      | ChatCompletionFunctionRunnerParams<FunctionsArgs>\n      | ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs>,\n    options?: RunnerOptions,\n  ) {\n    const role = 'function' as const;\n    const { function_call = 'auto', stream, ...restParams } = params;\n    const singleFunctionToCall = typeof function_call !== 'string' && function_call?.name;\n    const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n\n    const functionsByName: Record<string, RunnableFunction<any>> = {};\n    for (const f of params.functions) {\n      functionsByName[f.name || f.function.name] = f;\n    }\n\n    const functions: ChatCompletionCreateParams.Function[] = params.functions.map(\n      (f): ChatCompletionCreateParams.Function => ({\n        name: f.name || f.function.name,\n        parameters: f.parameters as Record<string, unknown>,\n        description: f.description,\n      }),\n    );\n\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n\n    for (let i = 0; i < maxChatCompletions; ++i) {\n      const chatCompletion: ChatCompletion = await this._createChatCompletion(\n        completions,\n        {\n          ...restParams,\n          function_call,\n          functions,\n          messages: [...this.messages],\n        },\n        options,\n      );\n      const message = chatCompletion.choices[0]?.message;\n      if (!message) {\n        throw new OpenAIError(`missing message in ChatCompletion response`);\n      }\n      if (!message.function_call) return;\n      const { name, arguments: args } = message.function_call;\n      const fn = functionsByName[name];\n      if (!fn) {\n        const content = `Invalid function_call: ${JSON.stringify(name)}. Available options are: ${functions\n          .map((f) => JSON.stringify(f.name))\n          .join(', ')}. Please try again`;\n\n        this._addMessage({ role, name, content });\n        continue;\n      } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n        const content = `Invalid function_call: ${JSON.stringify(name)}. ${JSON.stringify(\n          singleFunctionToCall,\n        )} requested. Please try again`;\n\n        this._addMessage({ role, name, content });\n        continue;\n      }\n\n      let parsed;\n      try {\n        parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n      } catch (error) {\n        this._addMessage({\n          role,\n          name,\n          content: error instanceof Error ? error.message : String(error),\n        });\n        continue;\n      }\n\n      // @ts-expect-error it can't rule out `never` type.\n      const rawContent = await fn.function(parsed, this);\n      const content = this.#stringifyFunctionCallResult(rawContent);\n\n      this._addMessage({ role, name, content });\n\n      if (singleFunctionToCall) return;\n    }\n  }\n\n  protected async _runTools<FunctionsArgs extends BaseFunctionsArgs>(\n    completions: Completions,\n    params:\n      | ChatCompletionToolRunnerParams<FunctionsArgs>\n      | ChatCompletionStreamingToolRunnerParams<FunctionsArgs>,\n    options?: RunnerOptions,\n  ) {\n    const role = 'tool' as const;\n    const { tool_choice = 'auto', stream, ...restParams } = params;\n    const singleFunctionToCall = typeof tool_choice !== 'string' && tool_choice?.function?.name;\n    const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n\n    const functionsByName: Record<string, RunnableFunction<any>> = {};\n    for (const f of params.tools) {\n      if (f.type === 'function') {\n        functionsByName[f.function.name || f.function.function.name] = f.function;\n      }\n    }\n\n    const tools: ChatCompletionTool[] =\n      'tools' in params ?\n        params.tools.map((t) =>\n          t.type === 'function' ?\n            {\n              type: 'function',\n              function: {\n                name: t.function.name || t.function.function.name,\n                parameters: t.function.parameters as Record<string, unknown>,\n                description: t.function.description,\n              },\n            }\n          : (t as unknown as ChatCompletionTool),\n        )\n      : (undefined as any);\n\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n\n    for (let i = 0; i < maxChatCompletions; ++i) {\n      const chatCompletion: ChatCompletion = await this._createChatCompletion(\n        completions,\n        {\n          ...restParams,\n          tool_choice,\n          tools,\n          messages: [...this.messages],\n        },\n        options,\n      );\n      const message = chatCompletion.choices[0]?.message;\n      if (!message) {\n        throw new OpenAIError(`missing message in ChatCompletion response`);\n      }\n      if (!message.tool_calls) {\n        return;\n      }\n\n      for (const tool_call of message.tool_calls) {\n        if (tool_call.type !== 'function') continue;\n        const tool_call_id = tool_call.id;\n        const { name, arguments: args } = tool_call.function;\n        const fn = functionsByName[name];\n\n        if (!fn) {\n          const content = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${tools\n            .map((f) => JSON.stringify(f.function.name))\n            .join(', ')}. Please try again`;\n\n          this._addMessage({ role, tool_call_id, content });\n          continue;\n        } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n          const content = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(\n            singleFunctionToCall,\n          )} requested. Please try again`;\n\n          this._addMessage({ role, tool_call_id, content });\n          continue;\n        }\n\n        let parsed;\n        try {\n          parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n        } catch (error) {\n          const content = error instanceof Error ? error.message : String(error);\n          this._addMessage({ role, tool_call_id, content });\n          continue;\n        }\n\n        // @ts-expect-error it can't rule out `never` type.\n        const rawContent = await fn.function(parsed, this);\n        const content = this.#stringifyFunctionCallResult(rawContent);\n        this._addMessage({ role, tool_call_id, content });\n\n        if (singleFunctionToCall) {\n          return;\n        }\n      }\n    }\n\n    return;\n  }\n\n  #stringifyFunctionCallResult(rawContent: unknown): string {\n    return (\n      typeof rawContent === 'string' ? rawContent\n      : rawContent === undefined ? 'undefined'\n      : JSON.stringify(rawContent)\n    );\n  }\n}\n\ntype CustomEvents<Event extends string> = {\n  [k in Event]: k extends keyof AbstractChatCompletionRunnerEvents ? AbstractChatCompletionRunnerEvents[k]\n  : (...args: any[]) => void;\n};\n\ntype ListenerForEvent<Events extends CustomEvents<any>, Event extends keyof Events> = Event extends (\n  keyof AbstractChatCompletionRunnerEvents\n) ?\n  AbstractChatCompletionRunnerEvents[Event]\n: Events[Event];\n\ntype ListenersForEvent<Events extends CustomEvents<any>, Event extends keyof Events> = Array<{\n  listener: ListenerForEvent<Events, Event>;\n  once?: boolean;\n}>;\ntype EventParameters<Events extends CustomEvents<any>, Event extends keyof Events> = Parameters<\n  ListenerForEvent<Events, Event>\n>;\n\nexport interface AbstractChatCompletionRunnerEvents {\n  connect: () => void;\n  functionCall: (functionCall: ChatCompletionMessage.FunctionCall) => void;\n  message: (message: ChatCompletionMessageParam) => void;\n  chatCompletion: (completion: ChatCompletion) => void;\n  finalContent: (contentSnapshot: string) => void;\n  finalMessage: (message: ChatCompletionMessageParam) => void;\n  finalChatCompletion: (completion: ChatCompletion) => void;\n  finalFunctionCall: (functionCall: ChatCompletionMessage.FunctionCall) => void;\n  functionCallResult: (content: string) => void;\n  finalFunctionCallResult: (content: string) => void;\n  error: (error: OpenAIError) => void;\n  abort: (error: APIUserAbortError) => void;\n  end: () => void;\n  totalUsage: (usage: CompletionUsage) => void;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}