{"ast":null,"code":"var _jsxFileName = \"/Users/sarrasassi/my-app/face-recognition-brain-2/src/App.js\";\nimport React, { Component } from 'react';\nimport ParticlesBg from 'particles-bg';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Navigation from './components/Navigation/Navigation';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\nimport ParticlesBackground from './components/ParticlesBackground.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: 'e51efb33f6234d068f3035c18a2bdc13'\n});\nconst PAT = 'b2b7fbb32a354800b86c3ac23cbedc09';\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\nconst USER_ID = 'stability-ai';\nconst APP_ID = 'stable-diffusion-2';\n// Change these to whatever model and text you want to use\nconst MODEL_ID = 'stable-diffusion-xl';\nconst MODEL_VERSION_ID = '68eeab068a5e4488a685fc67bc7ba71e';\nconst RAW_TEXT = 'A penguin watching the sunset.';\n// To use a hosted text file, assign the URL variable\n// const TEXT_FILE_URL = 'https://samples.clarifai.com/negative_sentence_12.txt'\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst raw = JSON.stringify({\n  \"inputs\": [{\n    \"data\": {\n      \"text\": {\n        \"raw\": RAW_TEXT\n        // \"url\": TEXT_FILE_URL\n      }\n    }\n  }]\n});\n\nconst requestOptions = {\n  method: 'POST',\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Key ' + PAT\n  },\n  body: raw\n};\nclass App extends Component {\n  constructor() {\n    super();\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n        }\n      });\n    };\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.onButtonSubmit = () => {\n      this.setState({\n        input: this.state.input\n      });\n      app.models.predict('stable-diffusion-xl', this.state.input).then(response => {\n        if (response) {\n          fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions).then(response => response.json()).then(result => {\n            const imageBase64 = result.outputs[0].data.image.base64;\n            // Create an anchor element for downloading the image\n            const downloadLink = document.createElement('a');\n            downloadLink.href = `data:image/jpeg;base64,${imageBase64}`;\n            downloadLink.download = 'gen-image.jpg';\n            // Trigger a click event on the link to prompt the download\n            downloadLink.click();\n          }).catch(error => console.log('error', error));\n        }\n      }).catch(err => console.log(err));\n    };\n    this.onRouteChange = route => {\n      if (route === 'signout') {\n        this.setState({\n          isSignedIn: false\n        });\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n      this.setState({\n        route: route\n      });\n    };\n    this.state = {\n      input: '',\n      route: 'signin',\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        entries: 0,\n        joined: ''\n      },\n      generatedImageUrl: ''\n    };\n  }\n  render() {\n    const {\n      isSignedIn,\n      route,\n      generatedImageUrl\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBackground, {\n        id: \"ParticlesBackground\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n        isSignedIn: isSignedIn,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), route === 'home' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Rank, {\n          name: this.state.user.name,\n          entries: this.state.user.entries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onButtonSubmit: this.onButtonSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), generatedImageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: generatedImageUrl,\n          alt: \"Generated\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this) : route === 'signin' ? /*#__PURE__*/_jsxDEV(Signin, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","ParticlesBg","Clarifai","FaceRecognition","Navigation","Signin","Register","Logo","ImageLinkForm","Rank","ParticlesBackground","jsxDEV","_jsxDEV","app","App","apiKey","PAT","USER_ID","APP_ID","MODEL_ID","MODEL_VERSION_ID","RAW_TEXT","raw","JSON","stringify","requestOptions","method","headers","body","constructor","loadUser","data","setState","user","id","name","email","entries","joined","onInputChange","event","input","target","value","onButtonSubmit","state","models","predict","then","response","fetch","json","result","imageBase64","outputs","image","base64","downloadLink","document","createElement","href","download","click","catch","error","console","log","err","onRouteChange","route","isSignedIn","generatedImageUrl","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt"],"sources":["/Users/sarrasassi/my-app/face-recognition-brain-2/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport ParticlesBg from 'particles-bg';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Navigation from './components/Navigation/Navigation';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\nimport ParticlesBackground from './components/ParticlesBackground.js';\n\nconst app = new Clarifai.App({\n  apiKey: 'e51efb33f6234d068f3035c18a2bdc13'\n});\nconst PAT = 'b2b7fbb32a354800b86c3ac23cbedc09';    \n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\nconst USER_ID = 'stability-ai';\nconst APP_ID = 'stable-diffusion-2';\n// Change these to whatever model and text you want to use\nconst MODEL_ID = 'stable-diffusion-xl';\nconst MODEL_VERSION_ID = '68eeab068a5e4488a685fc67bc7ba71e';\nconst RAW_TEXT = 'A penguin watching the sunset.';\n// To use a hosted text file, assign the URL variable\n// const TEXT_FILE_URL = 'https://samples.clarifai.com/negative_sentence_12.txt'\n\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst raw = JSON.stringify({  \n    \"inputs\": [\n    {\n        \"data\": {\n          \"text\": {\n                \"raw\": RAW_TEXT\n              // \"url\": TEXT_FILE_URL\n            }\n        }\n    }\n],\n      \n});\n\nconst requestOptions = {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n    },\n    body: raw\n};\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      route: 'signin',\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        entries: 0,\n        joined: ''\n      },\n      generatedImageUrl:'',\n    }\n  }\n\n  loadUser = (data) => {\n    this.setState({\n      user: {\n        id: data.id,\n        name: data.name,\n        email: data.email,\n        entries: data.entries,\n        joined: data.joined\n      }\n    });\n  }\n\n\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value });\n  }\n\n  onButtonSubmit = () => {\n    this.setState({ input: this.state.input });\n\n    app.models.predict('stable-diffusion-xl', this.state.input)\n      .then(response => {\n        if (response) {\n         \nfetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n.then(response => response.json())\n.then(result => {\n        const imageBase64 = result.outputs[0].data.image.base64;\n        // Create an anchor element for downloading the image\n        const downloadLink = document.createElement('a');\n        downloadLink.href = `data:image/jpeg;base64,${imageBase64}`;\n        downloadLink.download = 'gen-image.jpg';\n        // Trigger a click event on the link to prompt the download\n        downloadLink.click();\n})      \n.catch(error => console.log('error', error));\n        }\n      \n      })\n      .catch(err => console.log(err));\n  }\n\n  onRouteChange = (route) => {\n    if (route === 'signout') {\n      this.setState({ isSignedIn: false })\n    } else if (route === 'home') {\n      this.setState({ isSignedIn: true })\n    }\n    this.setState({ route: route });\n  }\n\n  render() {\n    const { isSignedIn, route, generatedImageUrl  } = this.state;\n    return (\n      <div className=\"App\">\n        <ParticlesBackground id='ParticlesBackground' />\n        <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange} />\n        {route === 'home'\n          ? <div>\n            {/* <Logo /> */}\n            <Rank\n              name={this.state.user.name}\n              entries={this.state.user.entries}\n            />\n            <ImageLinkForm\n              onInputChange={this.onInputChange}\n              onButtonSubmit={this.onButtonSubmit}\n            />\n           {generatedImageUrl && <img src={generatedImageUrl} alt=\"Generated\" />}\n\n          </div>\n          : (\n            route === 'signin'\n              ? <Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\n              : <Register loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}