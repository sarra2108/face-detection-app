/*!
 * Author : Matteo Bruni
 * MIT license: https://opensource.org/licenses/MIT
 * Demo / Generator : https://particles.js.org/
 * GitHub : https://www.github.com/matteobruni/tsparticles
 * How to use? : Check the GitHub README
 * v3.3.0
 */
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(this["webpackChunk_tsparticles_shape_path"] = this["webpackChunk_tsparticles_shape_path"] || []).push([["dist_browser_PathDrawer_js"],{

/***/ "./dist/browser/PathDrawer.js":
/*!************************************!*\
  !*** ./dist/browser/PathDrawer.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PathDrawer: () => (/* binding */ PathDrawer)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ \"@tsparticles/engine\");\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils.js */ \"./dist/browser/Utils.js\");\n\n\nclass PathDrawer {\n  draw(data) {\n    const {\n      context,\n      particle,\n      radius\n    } = data;\n    if (!particle.pathData) {\n      return;\n    }\n    (0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__.drawPath)(context, radius, particle.pathData);\n  }\n  particleInit(container, particle) {\n    const shape = particle.shapeData;\n    if (!shape) {\n      return;\n    }\n    particle.pathData = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.deepExtend)({}, shape);\n  }\n}\n\n//# sourceURL=webpack://@tsparticles/shape-path/./dist/browser/PathDrawer.js?");

/***/ }),

/***/ "./dist/browser/Utils.js":
/*!*******************************!*\
  !*** ./dist/browser/Utils.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drawPath: () => (/* binding */ drawPath)\n/* harmony export */ });\nfunction drawPath(ctx, radius, path) {\n  const firstIndex = 0,\n    firstSegment = path.segments[firstIndex],\n    firstValue = firstSegment.values[firstIndex];\n  ctx.moveTo(firstValue.x * radius, firstValue.y * radius);\n  for (const segment of path.segments) {\n    const value = segment.values[firstIndex],\n      index2 = 1,\n      index3 = 2,\n      index4 = 3;\n    switch (segment.type) {\n      case \"line\":\n        ctx.lineTo(value.x * radius, value.y * radius);\n        break;\n      case \"bezier\":\n        ctx.bezierCurveTo(segment.values[index2].x * radius, segment.values[index2].y * radius, segment.values[index3].x * radius, segment.values[index3].y * radius, segment.values[index4].x * radius, segment.values[index4].y * radius);\n        break;\n      case \"quadratic\":\n        ctx.quadraticCurveTo(segment.values[index2].x * radius, segment.values[index2].y * radius, segment.values[index3].x * radius, segment.values[index3].y * radius);\n        break;\n      case \"arc\":\n        ctx.arc(value.x * radius, value.y * radius, segment.values[index2].x * radius, segment.values[index3].x, segment.values[index3].y);\n        break;\n      case \"ellipse\":\n        ctx.ellipse(value.x * radius, value.y * radius, segment.values[index2].x * radius, segment.values[index2].y * radius, segment.values[index3].x, segment.values[index4].x, segment.values[index4].y);\n    }\n  }\n  if (!path.half) {\n    return;\n  }\n  const lengthOffset = 1,\n    minLength = 0;\n  for (let i = path.segments.length - lengthOffset; i >= minLength; i--) {\n    const segment = path.segments[i],\n      value = segment.values[firstIndex],\n      index2 = 1,\n      index3 = 2;\n    switch (segment.type) {\n      case \"line\":\n        ctx.lineTo(value.x * -radius, value.y * radius);\n        break;\n      case \"bezier\":\n        ctx.bezierCurveTo(-segment.values[index3].x * radius, segment.values[index3].y * radius, -segment.values[index2].x * radius, segment.values[index2].y * radius, value.x * radius, value.y * radius);\n        break;\n      case \"quadratic\":\n        ctx.quadraticCurveTo(-segment.values[index2].x * radius, segment.values[index2].y * radius, -segment.values[index3].x * radius, segment.values[index3].y * radius);\n        break;\n      case \"arc\":\n      case \"ellipse\":\n      default:\n        break;\n    }\n  }\n}\n\n//# sourceURL=webpack://@tsparticles/shape-path/./dist/browser/Utils.js?");

/***/ })

}]);