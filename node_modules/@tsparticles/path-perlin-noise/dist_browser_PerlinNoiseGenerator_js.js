/*!
 * Author : Matteo Bruni
 * MIT license: https://opensource.org/licenses/MIT
 * Demo / Generator : https://particles.js.org/
 * GitHub : https://www.github.com/matteobruni/tsparticles
 * How to use? : Check the GitHub README
 * v3.3.0
 */
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(this["webpackChunk_tsparticles_path_perlin_noise"] = this["webpackChunk_tsparticles_path_perlin_noise"] || []).push([["dist_browser_PerlinNoiseGenerator_js"],{

/***/ "./dist/browser/PerlinNoiseGenerator.js":
/*!**********************************************!*\
  !*** ./dist/browser/PerlinNoiseGenerator.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PerlinNoiseGenerator: () => (/* binding */ PerlinNoiseGenerator)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ \"@tsparticles/engine\");\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _tsparticles_perlin_noise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tsparticles/perlin-noise */ \"@tsparticles/perlin-noise\");\n/* harmony import */ var _tsparticles_perlin_noise__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_tsparticles_perlin_noise__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst double = 2,\n  doublePI = Math.PI * double,\n  defaultOptions = {\n    draw: false,\n    size: 20,\n    increment: 0.004,\n    columns: 0,\n    rows: 0,\n    width: 0,\n    height: 0,\n    factor: {\n      angle: 0.02,\n      length: 0.01\n    },\n    offset: {\n      x: 40000,\n      y: 40000\n    }\n  };\nclass PerlinNoiseGenerator {\n  constructor() {\n    this._calculateField = () => {\n      const {\n          field,\n          noiseGen,\n          options\n        } = this,\n        lengthFactor = options.factor.length,\n        angleFactor = options.factor.angle;\n      for (let x = 0; x < options.columns; x++) {\n        const column = field[x];\n        for (let y = 0; y < options.rows; y++) {\n          const cell = column[y];\n          cell.length = noiseGen.noise3d(x * lengthFactor + options.offset.x, y * lengthFactor + options.offset.y, this.noiseZ);\n          cell.angle = noiseGen.noise3d(x * angleFactor, y * angleFactor, this.noiseZ) * doublePI;\n        }\n      }\n    };\n    this._drawField = ctx => {\n      const {\n        field,\n        options\n      } = this;\n      for (let x = 0; x < options.columns; x++) {\n        const column = field[x];\n        for (let y = 0; y < options.rows; y++) {\n          const cell = column[y],\n            {\n              angle,\n              length\n            } = cell;\n          ctx.setTransform(1, 0, 0, 1, x * this.options.size, y * this.options.size);\n          ctx.rotate(angle);\n          ctx.strokeStyle = \"white\";\n          ctx.beginPath();\n          ctx.moveTo(0, 0);\n          ctx.lineTo(0, this.options.size * length);\n          ctx.stroke();\n          ctx.setTransform(1, 0, 0, 1, 0, 0);\n        }\n      }\n    };\n    this._initField = () => {\n      const {\n        columns,\n        rows\n      } = this.options;\n      this.field = new Array(columns);\n      for (let x = 0; x < columns; x++) {\n        this.field[x] = new Array(rows);\n        for (let y = 0; y < rows; y++) {\n          this.field[x][y] = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.Vector.origin;\n        }\n      }\n    };\n    this.noiseGen = new _tsparticles_perlin_noise__WEBPACK_IMPORTED_MODULE_1__.PerlinNoise();\n    this.field = [];\n    this.noiseZ = 0;\n    this.options = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.deepExtend)({}, defaultOptions);\n  }\n  generate(particle) {\n    const pos = particle.getPosition(),\n      {\n        size\n      } = this.options,\n      point = {\n        x: Math.max(Math.floor(pos.x / size), 0),\n        y: Math.max(Math.floor(pos.y / size), 0)\n      },\n      {\n        field\n      } = this;\n    return !field?.[point.x]?.[point.y] ? _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.Vector.origin : field[point.x][point.y].copy();\n  }\n  init(container) {\n    this.container = container;\n    this._setup();\n  }\n  reset() {}\n  update() {\n    if (!this.container) {\n      return;\n    }\n    this._calculateField();\n    this.noiseZ += this.options.increment;\n    if (this.options.draw) {\n      this.container.canvas.draw(ctx => this._drawField(ctx));\n    }\n  }\n  _resetField() {\n    const container = this.container;\n    if (!container) {\n      return;\n    }\n    const sourceOptions = container.actualOptions.particles.move.path.options,\n      {\n        options\n      } = this;\n    options.size = sourceOptions.size > 0 ? sourceOptions.size : defaultOptions.size;\n    options.increment = sourceOptions.increment > 0 ? sourceOptions.increment : defaultOptions.increment;\n    options.draw = !!sourceOptions.draw;\n    const offset = sourceOptions.offset;\n    options.offset.x = offset?.x ?? defaultOptions.offset.x;\n    options.offset.y = offset?.y ?? defaultOptions.offset.y;\n    const factor = sourceOptions.factor;\n    options.factor.angle = factor?.angle ?? defaultOptions.factor.angle;\n    options.factor.length = factor?.length ?? defaultOptions.factor.length;\n    options.width = container.canvas.size.width;\n    options.height = container.canvas.size.height;\n    this.options.seed = sourceOptions.seed;\n    this.noiseGen.seed(this.options.seed ?? (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRandom)());\n    options.columns = Math.floor(this.options.width / this.options.size) + 1;\n    options.rows = Math.floor(this.options.height / this.options.size) + 1;\n    this._initField();\n  }\n  _setup() {\n    this.noiseZ = 0;\n    this._resetField();\n    window.addEventListener(\"resize\", () => this._resetField());\n  }\n}\n\n//# sourceURL=webpack://@tsparticles/path-perlin-noise/./dist/browser/PerlinNoiseGenerator.js?");

/***/ })

}]);