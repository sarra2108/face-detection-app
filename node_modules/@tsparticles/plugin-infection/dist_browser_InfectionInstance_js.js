/*!
 * Author : Matteo Bruni
 * MIT license: https://opensource.org/licenses/MIT
 * Demo / Generator : https://particles.js.org/
 * GitHub : https://www.github.com/matteobruni/tsparticles
 * How to use? : Check the GitHub README
 * v3.3.0
 */
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(this["webpackChunk_tsparticles_plugin_infection"] = this["webpackChunk_tsparticles_plugin_infection"] || []).push([["dist_browser_InfectionInstance_js"],{

/***/ "./dist/browser/Infecter.js":
/*!**********************************!*\
  !*** ./dist/browser/Infecter.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Infecter: () => (/* binding */ Infecter)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ \"@tsparticles/engine\");\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__);\n\nconst minStage = 0,\n  minDuration = 0;\nclass Infecter {\n  constructor(container) {\n    this._nextInfectionStage = particle => {\n      const infectionOptions = this._container.actualOptions.infection,\n        {\n          infection\n        } = particle;\n      if (!infectionOptions || !infection) {\n        return;\n      }\n      const stagesCount = infectionOptions.stages.length;\n      if (stagesCount <= minStage || infection.stage === undefined) {\n        return;\n      }\n      infection.time = 0;\n      if (stagesCount <= ++infection.stage) {\n        if (infectionOptions.cure) {\n          delete infection.stage;\n          delete infection.time;\n        } else {\n          infection.stage = 0;\n          infection.time = 0;\n        }\n      }\n    };\n    this._container = container;\n  }\n  startInfection(particle, stage) {\n    const infectionOptions = this._container.actualOptions.infection,\n      {\n        infection\n      } = particle;\n    if (!infectionOptions || !infection) {\n      return;\n    }\n    const stages = infectionOptions.stages,\n      stagesCount = stages.length;\n    if (stage > stagesCount || stage < minStage) {\n      return;\n    }\n    infection.delay = 0;\n    infection.delayStage = stage;\n  }\n  updateInfection(particle, delta) {\n    const infectionOptions = this._container.actualOptions.infection,\n      {\n        infection\n      } = particle;\n    if (!infectionOptions || !infection) {\n      return;\n    }\n    const stages = infectionOptions.stages,\n      stagesCount = stages.length;\n    if (infection.delay !== undefined && infection.delayStage !== undefined) {\n      const stage = infection.delayStage;\n      if (stage > stagesCount || stage < minStage) {\n        return;\n      }\n      if (infection.delay >= infectionOptions.delay * _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.millisecondsToSeconds) {\n        infection.stage = stage;\n        infection.time = 0;\n        delete infection.delay;\n        delete infection.delayStage;\n      } else {\n        infection.delay += delta;\n      }\n    } else {\n      delete infection.delay;\n      delete infection.delayStage;\n    }\n    if (infection.stage !== undefined && infection.time !== undefined) {\n      const infectionStage = stages[infection.stage];\n      if (infectionStage.duration !== undefined && infectionStage.duration >= minDuration) {\n        if (infection.time > infectionStage.duration * _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.millisecondsToSeconds) {\n          this._nextInfectionStage(particle);\n        } else {\n          infection.time += delta;\n        }\n      } else {\n        infection.time += delta;\n      }\n    } else {\n      delete infection.stage;\n      delete infection.time;\n    }\n  }\n  updateInfectionStage(particle, stage) {\n    const options = this._container.actualOptions,\n      {\n        infection\n      } = particle;\n    if (!options.infection || !infection) {\n      return;\n    }\n    const stagesCount = options.infection.stages.length;\n    if (stage > stagesCount || stage < minStage || infection.stage !== undefined && infection.stage > stage) {\n      return;\n    }\n    infection.stage = stage;\n    infection.time = 0;\n  }\n}\n\n//# sourceURL=webpack://@tsparticles/plugin-infection/./dist/browser/Infecter.js?");

/***/ }),

/***/ "./dist/browser/InfectionInstance.js":
/*!*******************************************!*\
  !*** ./dist/browser/InfectionInstance.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InfectionInstance: () => (/* binding */ InfectionInstance)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ \"@tsparticles/engine\");\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Infecter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Infecter.js */ \"./dist/browser/Infecter.js\");\n\n\nconst minStage = 0;\nclass InfectionInstance {\n  constructor(container) {\n    this._container = container;\n    this._container.infecter = new _Infecter_js__WEBPACK_IMPORTED_MODULE_1__.Infecter(this._container);\n  }\n  particleFillColor(particle) {\n    const options = this._container.actualOptions;\n    if (!particle.infection || !options.infection) {\n      return;\n    }\n    const infectionStage = particle.infection.stage,\n      infection = options.infection,\n      infectionStages = infection.stages;\n    return infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;\n  }\n  particleStrokeColor(particle) {\n    return this.particleFillColor(particle);\n  }\n  particlesSetup() {\n    const options = this._container.actualOptions;\n    if (!options.infection) {\n      return;\n    }\n    for (let i = 0; i < options.infection.infections; i++) {\n      const notInfected = this._container.particles.filter(p => {\n        const infP = p;\n        if (!infP.infection) {\n          infP.infection = {};\n        }\n        return infP.infection.stage === undefined;\n      });\n      const infected = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.itemFromArray)(notInfected);\n      this._container.infecter?.startInfection(infected, minStage);\n    }\n  }\n}\n\n//# sourceURL=webpack://@tsparticles/plugin-infection/./dist/browser/InfectionInstance.js?");

/***/ })

}]);