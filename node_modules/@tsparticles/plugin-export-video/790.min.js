/*! For license information please see 790.min.js.LICENSE.txt */
(this.webpackChunk_tsparticles_plugin_export_video=this.webpackChunk_tsparticles_plugin_export_video||[]).push([[790],{790:(e,t,s)=>{s.d(t,{ExportVideoInstance:()=>a});var o=s(303);const p=["webm","ogg","mp4","x-matroska"],i=["vp9","vp9.0","vp8","vp8.0","avc1","av1","h265","h.265","h264","h.264","opus","pcm","aac","mpeg","mp4a"];class a{constructor(e,t){this._supportedTypes=[],this._exportVideo=async e=>{const t=this._container.canvas.element;if(t)return new Promise((s=>{const p=t.captureStream(e.fps??this._container.actualOptions.fpsLimit),i=e.mimeType??this._supportedTypes[0],a=new MediaRecorder(p,{mimeType:i}),r=[];a.addEventListener("dataavailable",(e=>{r.push(e.data)})),a.addEventListener("stop",(()=>{s(new Blob(r,{type:i}))})),a.start(),setTimeout((()=>{a.stop()}),e.duration??5*o.millisecondsToSeconds)}))},this._container=e,this._engine=t,this._supportedTypes=function(){const e=e=>MediaRecorder.isTypeSupported(e),t=[];return p.forEach((s=>{const o=`video/${s}`;i.forEach((s=>[`${o};codecs=${s}`,`${o};codecs=${s.toUpperCase()}`].forEach((s=>{e(s)&&t.push(s)})))),e(o)&&t.push(o)})),t}()}async export(e,t){const s={supported:!1};if("video"===e)s.supported=!0,s.blob=await this._exportVideo(t);return s}}}}]);