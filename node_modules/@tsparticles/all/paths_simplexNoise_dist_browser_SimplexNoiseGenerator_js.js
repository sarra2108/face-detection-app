/*!
 * Author : Matteo Bruni
 * MIT license: https://opensource.org/licenses/MIT
 * Demo / Generator : https://particles.js.org/
 * GitHub : https://www.github.com/matteobruni/tsparticles
 * How to use? : Check the GitHub README
 * v3.3.0
 */
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(this["webpackChunk_tsparticles_all"] = this["webpackChunk_tsparticles_all"] || []).push([["paths_simplexNoise_dist_browser_SimplexNoiseGenerator_js"],{

/***/ "../../paths/simplexNoise/dist/browser/SimplexNoiseGenerator.js":
/*!**********************************************************************!*\
  !*** ../../paths/simplexNoise/dist/browser/SimplexNoiseGenerator.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SimplexNoiseGenerator: () => (/* binding */ SimplexNoiseGenerator)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ \"../../engine/dist/browser/index.js\");\n/* harmony import */ var _tsparticles_simplex_noise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tsparticles/simplex-noise */ \"../../utils/simplexNoise/dist/browser/index.js\");\n\n\nconst defaultOptions = {\n  size: 20,\n  increment: 0.004,\n  columns: 0,\n  rows: 0,\n  layers: 0,\n  width: 0,\n  height: 0,\n  offset: {\n    x: 40000,\n    y: 40000,\n    z: 40000\n  }\n};\nclass SimplexNoiseGenerator {\n  constructor() {\n    const simplex = new _tsparticles_simplex_noise__WEBPACK_IMPORTED_MODULE_1__.SimplexNoise();\n    this._simplex = simplex.noise4d;\n    this.field = [];\n    this.noiseW = 0;\n    this.options = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.deepExtend)({}, defaultOptions);\n  }\n  generate(particle) {\n    const pos = particle.getPosition(),\n      point = {\n        x: Math.max(Math.floor(pos.x / this.options.size), 0),\n        y: Math.max(Math.floor(pos.y / this.options.size), 0),\n        z: Math.max(Math.floor(pos.z / this.options.size), 0)\n      },\n      v = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.Vector.origin;\n    if (!this.field?.[point.x]?.[point.y]?.[point.z]) {\n      return v;\n    }\n    v.setTo(this.field[point.x][point.y][point.z]);\n    return v;\n  }\n  init(container) {\n    this.container = container;\n    this._setup();\n  }\n  reset() {}\n  update() {\n    if (!this.container) {\n      return;\n    }\n    this._calculateField();\n    this.noiseW += this.options.increment;\n  }\n  _calculateField() {\n    const options = this.options;\n    for (let x = 0; x < options.columns; x++) {\n      for (let y = 0; y < options.rows; y++) {\n        for (let z = 0; z < options.layers; z++) {\n          this.field[x][y][z].angle = this._simplex.noise(x / 50, y / 50, z / 50, this.noiseW) * Math.PI * 2;\n          this.field[x][y][z].length = this._simplex.noise(x / 100 + options.offset.x, y / 100 + options.offset.y, z / 100 + options.offset.z, this.noiseW);\n        }\n      }\n    }\n  }\n  _initField() {\n    this.field = new Array(this.options.columns);\n    for (let x = 0; x < this.options.columns; x++) {\n      this.field[x] = new Array(this.options.rows);\n      for (let y = 0; y < this.options.rows; y++) {\n        this.field[x][y] = new Array(this.options.layers);\n        for (let z = 0; z < this.options.layers; z++) {\n          this.field[x][y][z] = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.Vector.origin;\n        }\n      }\n    }\n  }\n  _resetField() {\n    const container = this.container;\n    if (!container) {\n      return;\n    }\n    const sourceOptions = container.actualOptions.particles.move.path.options;\n    this.options.size = sourceOptions.size > 0 ? sourceOptions.size : defaultOptions.size;\n    this.options.increment = sourceOptions.increment > 0 ? sourceOptions.increment : defaultOptions.increment;\n    this.options.width = container.canvas.size.width;\n    this.options.height = container.canvas.size.height;\n    const offset = sourceOptions.offset;\n    this.options.offset.x = offset?.x ?? defaultOptions.offset.x;\n    this.options.offset.y = offset?.y ?? defaultOptions.offset.y;\n    this.options.offset.z = offset?.z ?? defaultOptions.offset.z;\n    this.options.seed = sourceOptions.seed ?? defaultOptions.seed;\n    this._simplex.seed(this.options.seed ?? (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRandom)());\n    this.options.columns = Math.floor(this.options.width / this.options.size) + 1;\n    this.options.rows = Math.floor(this.options.height / this.options.size) + 1;\n    this.options.layers = Math.floor(container.zLayers / this.options.size) + 1;\n    this._initField();\n  }\n  _setup() {\n    this.noiseW = 0;\n    this._resetField();\n    addEventListener(\"resize\", () => this._resetField());\n  }\n}\n\n//# sourceURL=webpack://@tsparticles/all/../../paths/simplexNoise/dist/browser/SimplexNoiseGenerator.js?");

/***/ })

}]);