/*!
 * Author : Matteo Bruni
 * MIT license: https://opensource.org/licenses/MIT
 * Demo / Generator : https://particles.js.org/
 * GitHub : https://www.github.com/matteobruni/tsparticles
 * How to use? : Check the GitHub README
 * v3.3.0
 */
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(this["webpackChunk_tsparticles_all"] = this["webpackChunk_tsparticles_all"] || []).push([["plugins_exports_video_dist_browser_ExportVideoInstance_js"],{

/***/ "../../plugins/exports/video/dist/browser/ExportVideoInstance.js":
/*!***********************************************************************!*\
  !*** ../../plugins/exports/video/dist/browser/ExportVideoInstance.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExportVideoInstance: () => (/* binding */ ExportVideoInstance)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ \"../../engine/dist/browser/index.js\");\n\nconst videoTypes = [\"webm\", \"ogg\", \"mp4\", \"x-matroska\"],\n  codecs = [\"vp9\", \"vp9.0\", \"vp8\", \"vp8.0\", \"avc1\", \"av1\", \"h265\", \"h.265\", \"h264\", \"h.264\", \"opus\", \"pcm\", \"aac\", \"mpeg\", \"mp4a\"];\nfunction getVideoSupportedMimeTypes() {\n  const isSupported = type => MediaRecorder.isTypeSupported(type),\n    supported = [];\n  videoTypes.forEach(type => {\n    const mimeType = `video/${type}`;\n    codecs.forEach(codec => [`${mimeType};codecs=${codec}`, `${mimeType};codecs=${codec.toUpperCase()}`].forEach(variation => {\n      if (isSupported(variation)) {\n        supported.push(variation);\n      }\n    }));\n    if (isSupported(mimeType)) {\n      supported.push(mimeType);\n    }\n  });\n  return supported;\n}\nclass ExportVideoInstance {\n  constructor(container, engine) {\n    this._supportedTypes = [];\n    this._exportVideo = async data => {\n      const element = this._container.canvas.element;\n      if (!element) {\n        return;\n      }\n      return new Promise(resolve => {\n        const stream = element.captureStream(data.fps ?? this._container.actualOptions.fpsLimit),\n          firstIndex = 0,\n          mimeType = data.mimeType ?? this._supportedTypes[firstIndex],\n          recorder = new MediaRecorder(stream, {\n            mimeType\n          }),\n          chunks = [],\n          defaultDuration = 5;\n        recorder.addEventListener(\"dataavailable\", event => {\n          chunks.push(event.data);\n        });\n        recorder.addEventListener(\"stop\", () => {\n          resolve(new Blob(chunks, {\n            type: mimeType\n          }));\n        });\n        recorder.start();\n        setTimeout(() => {\n          recorder.stop();\n        }, data.duration ?? defaultDuration * _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.millisecondsToSeconds);\n      });\n    };\n    this._container = container;\n    this._engine = engine;\n    this._supportedTypes = getVideoSupportedMimeTypes();\n  }\n  async export(type, data) {\n    const res = {\n      supported: false\n    };\n    switch (type) {\n      case \"video\":\n        res.supported = true;\n        res.blob = await this._exportVideo(data);\n        break;\n    }\n    return res;\n  }\n}\n\n//# sourceURL=webpack://@tsparticles/all/../../plugins/exports/video/dist/browser/ExportVideoInstance.js?");

/***/ })

}]);