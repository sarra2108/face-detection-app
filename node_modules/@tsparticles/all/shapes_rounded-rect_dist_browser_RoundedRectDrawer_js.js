/*!
 * Author : Matteo Bruni
 * MIT license: https://opensource.org/licenses/MIT
 * Demo / Generator : https://particles.js.org/
 * GitHub : https://www.github.com/matteobruni/tsparticles
 * How to use? : Check the GitHub README
 * v3.3.0
 */
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(this["webpackChunk_tsparticles_all"] = this["webpackChunk_tsparticles_all"] || []).push([["shapes_rounded-rect_dist_browser_RoundedRectDrawer_js"],{

/***/ "../../shapes/rounded-rect/dist/browser/RoundedRectDrawer.js":
/*!*******************************************************************!*\
  !*** ../../shapes/rounded-rect/dist/browser/RoundedRectDrawer.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RoundedRectDrawer: () => (/* binding */ RoundedRectDrawer)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ \"../../engine/dist/browser/index.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils.js */ \"../../shapes/rounded-rect/dist/browser/Utils.js\");\n\n\nconst fixFactorSquare = 2,\n  fixFactor = Math.sqrt(fixFactorSquare),\n  double = 2,\n  defaultRadius = 5;\nclass RoundedRectDrawer {\n  draw(data) {\n    const {\n        context,\n        particle,\n        radius\n      } = data,\n      fixedRadius = radius / fixFactor,\n      fixedDiameter = fixedRadius * double,\n      borderRadius = particle.borderRadius ?? defaultRadius;\n    if (\"roundRect\" in context) {\n      context.roundRect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter, borderRadius);\n    } else {\n      (0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__.drawRoundedRect)(context, fixedRadius, fixedDiameter, borderRadius);\n    }\n  }\n  particleInit(container, particle) {\n    const shapeData = particle.shapeData;\n    particle.borderRadius = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(shapeData?.radius ?? defaultRadius) * container.retina.pixelRatio;\n  }\n}\n\n//# sourceURL=webpack://@tsparticles/all/../../shapes/rounded-rect/dist/browser/RoundedRectDrawer.js?");

/***/ }),

/***/ "../../shapes/rounded-rect/dist/browser/Utils.js":
/*!*******************************************************!*\
  !*** ../../shapes/rounded-rect/dist/browser/Utils.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drawRoundedRect: () => (/* binding */ drawRoundedRect)\n/* harmony export */ });\nfunction drawRoundedRect(ctx, fixedRadius, fixedDiameter, borderRadius) {\n  const info = {\n      x: -fixedRadius,\n      y: -fixedRadius,\n      height: fixedDiameter,\n      width: fixedDiameter\n    },\n    radius = {\n      topLeft: borderRadius,\n      topRight: borderRadius,\n      bottomLeft: borderRadius,\n      bottomRight: borderRadius\n    },\n    {\n      x,\n      y,\n      width,\n      height\n    } = info,\n    r = x + width,\n    b = y + height;\n  ctx.moveTo(x + radius.topLeft, y);\n  ctx.lineTo(r - radius.topRight, y);\n  ctx.quadraticCurveTo(r, y, r, y + radius.topRight);\n  ctx.lineTo(r, y + height - radius.bottomRight);\n  ctx.quadraticCurveTo(r, b, r - radius.bottomRight, b);\n  ctx.lineTo(x + radius.bottomLeft, b);\n  ctx.quadraticCurveTo(x, b, x, b - radius.bottomLeft);\n  ctx.lineTo(x, y + radius.topLeft);\n  ctx.quadraticCurveTo(x, y, x + radius.topLeft, y);\n}\n\n//# sourceURL=webpack://@tsparticles/all/../../shapes/rounded-rect/dist/browser/Utils.js?");

/***/ })

}]);