/*!
 * Author : Matteo Bruni
 * MIT license: https://opensource.org/licenses/MIT
 * Demo / Generator : https://particles.js.org/
 * GitHub : https://www.github.com/matteobruni/tsparticles
 * How to use? : Check the GitHub README
 * v3.3.0
 */
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(this["webpackChunk_tsparticles_all"] = this["webpackChunk_tsparticles_all"] || []).push([["interactions_light_dist_browser_ParticlesLighter_js"],{

/***/ "../../interactions/light/dist/browser/ParticlesLighter.js":
/*!*****************************************************************!*\
  !*** ../../interactions/light/dist/browser/ParticlesLighter.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParticlesLighter: () => (/* binding */ ParticlesLighter)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ \"../../engine/dist/browser/index.js\");\n/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils.js */ \"../../interactions/light/dist/browser/Utils.js\");\n\n\nclass ParticlesLighter extends _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.ParticlesInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n  clear() {}\n  init() {}\n  interact(particle) {\n    const container = this.container,\n      options = container.actualOptions,\n      interactivity = container.interactivity;\n    if (!options.interactivity.events.onHover.enable || interactivity.status !== \"pointermove\") {\n      return;\n    }\n    const mousePos = interactivity.mouse.position;\n    if (!mousePos) {\n      return;\n    }\n    container.canvas.draw(ctx => {\n      (0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__.drawParticleShadow)(container, ctx, particle, mousePos);\n    });\n  }\n  isEnabled(particle) {\n    const container = this.container,\n      interactivity = particle.interactivity ?? container.actualOptions.interactivity,\n      mouse = container.interactivity.mouse,\n      events = interactivity.events;\n    if (!(events.onHover.enable && mouse.position)) {\n      return false;\n    }\n    const res = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.isInArray)(_Utils_js__WEBPACK_IMPORTED_MODULE_1__.lightMode, events.onHover.mode);\n    if (res && interactivity.modes.light) {\n      const shadowOptions = interactivity.modes.light.shadow;\n      particle.lightShadow = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.rangeColorToRgb)(shadowOptions.color);\n    }\n    return res;\n  }\n  reset() {}\n}\n\n//# sourceURL=webpack://@tsparticles/all/../../interactions/light/dist/browser/ParticlesLighter.js?");

/***/ }),

/***/ "../../interactions/light/dist/browser/Utils.js":
/*!******************************************************!*\
  !*** ../../interactions/light/dist/browser/Utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drawLight: () => (/* binding */ drawLight),\n/* harmony export */   drawParticleShadow: () => (/* binding */ drawParticleShadow),\n/* harmony export */   lightMode: () => (/* binding */ lightMode)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ \"../../engine/dist/browser/index.js\");\n\nconst gradientPos = {\n    max: 1,\n    min: 0\n  },\n  half = 0.5,\n  double = 2,\n  halfPI = Math.PI * half,\n  doublePI = Math.PI * double,\n  quarter = 0.25,\n  quarterPI = Math.PI * quarter,\n  arcStart = 0;\nconst lightMode = \"light\";\nfunction drawLight(container, context, mousePos) {\n  const lightOptions = container.actualOptions.interactivity.modes.light?.area;\n  if (!lightOptions) {\n    return;\n  }\n  context.beginPath();\n  context.arc(mousePos.x, mousePos.y, lightOptions.radius, arcStart, doublePI);\n  const gradientAmbientLight = context.createRadialGradient(mousePos.x, mousePos.y, arcStart, mousePos.x, mousePos.y, lightOptions.radius);\n  const gradientRgb = container.canvas.mouseLight;\n  if (!gradientRgb?.start || !gradientRgb.stop) {\n    return;\n  }\n  gradientAmbientLight.addColorStop(gradientPos.min, (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getStyleFromRgb)(gradientRgb.start));\n  gradientAmbientLight.addColorStop(gradientPos.max, (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getStyleFromRgb)(gradientRgb.stop));\n  context.fillStyle = gradientAmbientLight;\n  context.fill();\n}\nfunction drawParticleShadow(container, context, particle, mousePos) {\n  const pos = particle.getPosition(),\n    shadowOptions = container.actualOptions.interactivity.modes.light?.shadow;\n  if (!shadowOptions) {\n    return;\n  }\n  const shadowRgb = particle.lightShadow;\n  if (!shadowRgb) {\n    return;\n  }\n  const radius = particle.getRadius(),\n    sides = particle.sides,\n    full = doublePI / sides,\n    angle = -particle.rotation + quarterPI,\n    factor = 1,\n    dots = [];\n  for (let i = 0; i < sides; i++) {\n    dots.push({\n      x: pos.x + radius * Math.sin(angle + full * i) * factor,\n      y: pos.y + radius * Math.cos(angle + full * i) * factor\n    });\n  }\n  const points = [],\n    shadowLength = shadowOptions.length;\n  for (const dot of dots) {\n    const dotAngle = Math.atan2(mousePos.y - dot.y, mousePos.x - dot.x),\n      end = {\n        x: dot.x + shadowLength * Math.sin(-dotAngle - halfPI),\n        y: dot.y + shadowLength * Math.cos(-dotAngle - halfPI)\n      };\n    points.push({\n      end: end,\n      start: dot\n    });\n  }\n  const shadowColor = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getStyleFromRgb)(shadowRgb),\n    lastOffset = 1,\n    firstPos = 0,\n    last = points.length - lastOffset;\n  for (let i = last, n = 0; i >= firstPos; n = i--) {\n    context.beginPath();\n    context.moveTo(points[i].start.x, points[i].start.y);\n    context.lineTo(points[n].start.x, points[n].start.y);\n    context.lineTo(points[n].end.x, points[n].end.y);\n    context.lineTo(points[i].end.x, points[i].end.y);\n    context.fillStyle = shadowColor;\n    context.fill();\n  }\n}\n\n//# sourceURL=webpack://@tsparticles/all/../../interactions/light/dist/browser/Utils.js?");

/***/ })

}]);