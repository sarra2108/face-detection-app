/*!
 * Author : Matteo Bruni
 * MIT license: https://opensource.org/licenses/MIT
 * Demo / Generator : https://particles.js.org/
 * GitHub : https://www.github.com/matteobruni/tsparticles
 * How to use? : Check the GitHub README
 * v3.3.0
 */
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(this["webpackChunk_tsparticles_all"] = this["webpackChunk_tsparticles_all"] || []).push([["paths_curlNoise_dist_browser_CurlNoiseGenerator_js"],{

/***/ "../../paths/curlNoise/dist/browser/CurlNoiseGenerator.js":
/*!****************************************************************!*\
  !*** ../../paths/curlNoise/dist/browser/CurlNoiseGenerator.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CurlNoiseGenerator: () => (/* binding */ CurlNoiseGenerator)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ \"../../engine/dist/browser/index.js\");\n/* harmony import */ var _tsparticles_simplex_noise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tsparticles/simplex-noise */ \"../../utils/simplexNoise/dist/browser/index.js\");\n\n\nconst defaultOptions = {\n    speed: 0.2,\n    step: 250\n  },\n  double = 2;\nclass CurlNoiseGenerator {\n  constructor() {\n    const simplex = new _tsparticles_simplex_noise__WEBPACK_IMPORTED_MODULE_1__.SimplexNoise();\n    this._simplex = simplex.noise2d;\n    this.options = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.deepExtend)({}, defaultOptions);\n  }\n  generate(particle) {\n    const pos = particle.getPosition(),\n      {\n        speed,\n        step\n      } = this.options,\n      x = pos.x / step,\n      y = pos.y / step,\n      eps = 0.001,\n      n1a = this._simplex.noise(x, y + eps),\n      n2a = this._simplex.noise(x, y - eps),\n      a = (n1a - n2a) / (double * eps),\n      n1b = this._simplex.noise(x + eps, y),\n      n2b = this._simplex.noise(x - eps, y),\n      b = (n1b - n2b) / (double * eps);\n    particle.velocity.x = 0;\n    particle.velocity.y = 0;\n    return _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.Vector.create(speed * a, speed * -b);\n  }\n  init(container) {\n    const sourceOptions = container.actualOptions.particles.move.path.options;\n    this.options.seed = sourceOptions?.seed;\n    this.options.speed = (sourceOptions?.speed ?? defaultOptions.speed) * container.retina.pixelRatio;\n    this.options.step = sourceOptions?.step ?? defaultOptions.step;\n    this._simplex.seed(this.options.seed ?? (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRandom)());\n  }\n  reset() {}\n  update() {}\n}\n\n//# sourceURL=webpack://@tsparticles/all/../../paths/curlNoise/dist/browser/CurlNoiseGenerator.js?");

/***/ })

}]);