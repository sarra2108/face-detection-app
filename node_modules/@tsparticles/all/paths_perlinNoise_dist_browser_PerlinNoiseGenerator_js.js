/*!
 * Author : Matteo Bruni
 * MIT license: https://opensource.org/licenses/MIT
 * Demo / Generator : https://particles.js.org/
 * GitHub : https://www.github.com/matteobruni/tsparticles
 * How to use? : Check the GitHub README
 * v3.3.0
 */
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(this["webpackChunk_tsparticles_all"] = this["webpackChunk_tsparticles_all"] || []).push([["paths_perlinNoise_dist_browser_PerlinNoiseGenerator_js"],{

/***/ "../../paths/perlinNoise/dist/browser/PerlinNoiseGenerator.js":
/*!********************************************************************!*\
  !*** ../../paths/perlinNoise/dist/browser/PerlinNoiseGenerator.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PerlinNoiseGenerator: () => (/* binding */ PerlinNoiseGenerator)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ \"../../engine/dist/browser/index.js\");\n/* harmony import */ var _tsparticles_perlin_noise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tsparticles/perlin-noise */ \"../../utils/perlinNoise/dist/browser/index.js\");\n\n\nconst double = 2,\n  doublePI = Math.PI * double,\n  defaultOptions = {\n    draw: false,\n    size: 20,\n    increment: 0.004,\n    columns: 0,\n    rows: 0,\n    width: 0,\n    height: 0,\n    factor: {\n      angle: 0.02,\n      length: 0.01\n    },\n    offset: {\n      x: 40000,\n      y: 40000\n    }\n  };\nclass PerlinNoiseGenerator {\n  constructor() {\n    this._calculateField = () => {\n      const {\n          field,\n          noiseGen,\n          options\n        } = this,\n        lengthFactor = options.factor.length,\n        angleFactor = options.factor.angle;\n      for (let x = 0; x < options.columns; x++) {\n        const column = field[x];\n        for (let y = 0; y < options.rows; y++) {\n          const cell = column[y];\n          cell.length = noiseGen.noise3d(x * lengthFactor + options.offset.x, y * lengthFactor + options.offset.y, this.noiseZ);\n          cell.angle = noiseGen.noise3d(x * angleFactor, y * angleFactor, this.noiseZ) * doublePI;\n        }\n      }\n    };\n    this._drawField = ctx => {\n      const {\n        field,\n        options\n      } = this;\n      for (let x = 0; x < options.columns; x++) {\n        const column = field[x];\n        for (let y = 0; y < options.rows; y++) {\n          const cell = column[y],\n            {\n              angle,\n              length\n            } = cell;\n          ctx.setTransform(1, 0, 0, 1, x * this.options.size, y * this.options.size);\n          ctx.rotate(angle);\n          ctx.strokeStyle = \"white\";\n          ctx.beginPath();\n          ctx.moveTo(0, 0);\n          ctx.lineTo(0, this.options.size * length);\n          ctx.stroke();\n          ctx.setTransform(1, 0, 0, 1, 0, 0);\n        }\n      }\n    };\n    this._initField = () => {\n      const {\n        columns,\n        rows\n      } = this.options;\n      this.field = new Array(columns);\n      for (let x = 0; x < columns; x++) {\n        this.field[x] = new Array(rows);\n        for (let y = 0; y < rows; y++) {\n          this.field[x][y] = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.Vector.origin;\n        }\n      }\n    };\n    this.noiseGen = new _tsparticles_perlin_noise__WEBPACK_IMPORTED_MODULE_1__.PerlinNoise();\n    this.field = [];\n    this.noiseZ = 0;\n    this.options = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.deepExtend)({}, defaultOptions);\n  }\n  generate(particle) {\n    const pos = particle.getPosition(),\n      {\n        size\n      } = this.options,\n      point = {\n        x: Math.max(Math.floor(pos.x / size), 0),\n        y: Math.max(Math.floor(pos.y / size), 0)\n      },\n      {\n        field\n      } = this;\n    return !field?.[point.x]?.[point.y] ? _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.Vector.origin : field[point.x][point.y].copy();\n  }\n  init(container) {\n    this.container = container;\n    this._setup();\n  }\n  reset() {}\n  update() {\n    if (!this.container) {\n      return;\n    }\n    this._calculateField();\n    this.noiseZ += this.options.increment;\n    if (this.options.draw) {\n      this.container.canvas.draw(ctx => this._drawField(ctx));\n    }\n  }\n  _resetField() {\n    const container = this.container;\n    if (!container) {\n      return;\n    }\n    const sourceOptions = container.actualOptions.particles.move.path.options,\n      {\n        options\n      } = this;\n    options.size = sourceOptions.size > 0 ? sourceOptions.size : defaultOptions.size;\n    options.increment = sourceOptions.increment > 0 ? sourceOptions.increment : defaultOptions.increment;\n    options.draw = !!sourceOptions.draw;\n    const offset = sourceOptions.offset;\n    options.offset.x = offset?.x ?? defaultOptions.offset.x;\n    options.offset.y = offset?.y ?? defaultOptions.offset.y;\n    const factor = sourceOptions.factor;\n    options.factor.angle = factor?.angle ?? defaultOptions.factor.angle;\n    options.factor.length = factor?.length ?? defaultOptions.factor.length;\n    options.width = container.canvas.size.width;\n    options.height = container.canvas.size.height;\n    this.options.seed = sourceOptions.seed;\n    this.noiseGen.seed(this.options.seed ?? (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRandom)());\n    options.columns = Math.floor(this.options.width / this.options.size) + 1;\n    options.rows = Math.floor(this.options.height / this.options.size) + 1;\n    this._initField();\n  }\n  _setup() {\n    this.noiseZ = 0;\n    this._resetField();\n    window.addEventListener(\"resize\", () => this._resetField());\n  }\n}\n\n//# sourceURL=webpack://@tsparticles/all/../../paths/perlinNoise/dist/browser/PerlinNoiseGenerator.js?");

/***/ }),

/***/ "../../utils/perlinNoise/dist/browser/Grad.js":
/*!****************************************************!*\
  !*** ../../utils/perlinNoise/dist/browser/Grad.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Grad: () => (/* binding */ Grad)\n/* harmony export */ });\nclass Grad {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  dot2(x, y) {\n    return this.x * x + this.y * y;\n  }\n  dot3(x, y, z) {\n    return this.dot2(x, y) + this.z * z;\n  }\n}\n\n//# sourceURL=webpack://@tsparticles/all/../../utils/perlinNoise/dist/browser/Grad.js?");

/***/ }),

/***/ "../../utils/perlinNoise/dist/browser/PerlinNoise.js":
/*!***********************************************************!*\
  !*** ../../utils/perlinNoise/dist/browser/PerlinNoise.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PerlinNoise: () => (/* binding */ PerlinNoise)\n/* harmony export */ });\n/* harmony import */ var _Grad_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Grad.js */ \"../../utils/perlinNoise/dist/browser/Grad.js\");\n\nclass PerlinNoise {\n  constructor() {\n    this._grad3 = [new _Grad_js__WEBPACK_IMPORTED_MODULE_0__.Grad(1, 1, 0), new _Grad_js__WEBPACK_IMPORTED_MODULE_0__.Grad(-1, 1, 0), new _Grad_js__WEBPACK_IMPORTED_MODULE_0__.Grad(1, -1, 0), new _Grad_js__WEBPACK_IMPORTED_MODULE_0__.Grad(-1, -1, 0), new _Grad_js__WEBPACK_IMPORTED_MODULE_0__.Grad(1, 0, 1), new _Grad_js__WEBPACK_IMPORTED_MODULE_0__.Grad(-1, 0, 1), new _Grad_js__WEBPACK_IMPORTED_MODULE_0__.Grad(1, 0, -1), new _Grad_js__WEBPACK_IMPORTED_MODULE_0__.Grad(-1, 0, -1), new _Grad_js__WEBPACK_IMPORTED_MODULE_0__.Grad(0, 1, 1), new _Grad_js__WEBPACK_IMPORTED_MODULE_0__.Grad(0, -1, 1), new _Grad_js__WEBPACK_IMPORTED_MODULE_0__.Grad(0, 1, -1), new _Grad_js__WEBPACK_IMPORTED_MODULE_0__.Grad(0, -1, -1)];\n    this._p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];\n    this._gradP = new Array(512);\n    this._perm = new Array(512);\n  }\n  noise2d(x, y) {\n    const {\n      _gradP,\n      _perm\n    } = this;\n    let X = Math.floor(x),\n      Y = Math.floor(y);\n    x = x - X;\n    y = y - Y;\n    X = X & 255;\n    Y = Y & 255;\n    const n00 = _gradP[X + _perm[Y]].dot2(x, y),\n      n01 = _gradP[X + _perm[Y + 1]].dot2(x, y - 1),\n      n10 = _gradP[X + 1 + _perm[Y]].dot2(x - 1, y),\n      n11 = _gradP[X + 1 + _perm[Y + 1]].dot2(x - 1, y - 1);\n    const u = this._fade(x);\n    return this._lerp(this._lerp(n00, n10, u), this._lerp(n01, n11, u), this._fade(y));\n  }\n  noise3d(x, y, z) {\n    const {\n      _gradP: gradP,\n      _perm: perm\n    } = this;\n    let X = Math.floor(x),\n      Y = Math.floor(y),\n      Z = Math.floor(z);\n    x = x - X;\n    y = y - Y;\n    z = z - Z;\n    X = X & 255;\n    Y = Y & 255;\n    Z = Z & 255;\n    const n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z),\n      n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1),\n      n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z),\n      n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1),\n      n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z),\n      n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1),\n      n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z),\n      n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1),\n      u = this._fade(x),\n      v = this._fade(y),\n      w = this._fade(z);\n    return this._lerp(this._lerp(this._lerp(n000, n100, u), this._lerp(n001, n101, u), w), this._lerp(this._lerp(n010, n110, u), this._lerp(n011, n111, u), w), v);\n  }\n  seed(inputSeed) {\n    const {\n      _grad3: grad3,\n      _gradP: gradP,\n      _perm: perm,\n      _p: p\n    } = this;\n    let seed = inputSeed;\n    if (seed > 0 && seed < 1) {\n      seed *= 65536;\n    }\n    seed = Math.floor(seed);\n    if (seed < 256) {\n      seed |= seed << 8;\n    }\n    for (let i = 0; i < 256; i++) {\n      const v = i & 1 ? p[i] ^ seed & 255 : p[i] ^ seed >> 8 & 255;\n      perm[i] = perm[i + 256] = v;\n      gradP[i] = gradP[i + 256] = grad3[v % 12];\n    }\n  }\n  _fade(t) {\n    return t * t * t * (t * (t * 6 - 15) + 10);\n  }\n  _lerp(a, b, t) {\n    return (1 - t) * a + t * b;\n  }\n}\n\n//# sourceURL=webpack://@tsparticles/all/../../utils/perlinNoise/dist/browser/PerlinNoise.js?");

/***/ }),

/***/ "../../utils/perlinNoise/dist/browser/index.js":
/*!*****************************************************!*\
  !*** ../../utils/perlinNoise/dist/browser/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PerlinNoise: () => (/* reexport safe */ _PerlinNoise_js__WEBPACK_IMPORTED_MODULE_0__.PerlinNoise)\n/* harmony export */ });\n/* harmony import */ var _PerlinNoise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PerlinNoise.js */ \"../../utils/perlinNoise/dist/browser/PerlinNoise.js\");\n\n\n//# sourceURL=webpack://@tsparticles/all/../../utils/perlinNoise/dist/browser/index.js?");

/***/ })

}]);