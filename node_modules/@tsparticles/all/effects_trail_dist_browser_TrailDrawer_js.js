/*!
 * Author : Matteo Bruni
 * MIT license: https://opensource.org/licenses/MIT
 * Demo / Generator : https://particles.js.org/
 * GitHub : https://www.github.com/matteobruni/tsparticles
 * How to use? : Check the GitHub README
 * v3.3.0
 */
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(this["webpackChunk_tsparticles_all"] = this["webpackChunk_tsparticles_all"] || []).push([["effects_trail_dist_browser_TrailDrawer_js"],{

/***/ "../../effects/trail/dist/browser/TrailDrawer.js":
/*!*******************************************************!*\
  !*** ../../effects/trail/dist/browser/TrailDrawer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TrailDrawer: () => (/* binding */ TrailDrawer)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ \"../../engine/dist/browser/index.js\");\n\nconst double = 2,\n  minTrailLength = 2,\n  trailLengthOffset = 1,\n  noItems = 0,\n  half = 0.5,\n  minWidth = -1,\n  defaultLength = 10,\n  defaultAlpha = 1;\nclass TrailDrawer {\n  draw(data) {\n    const {\n        context,\n        radius,\n        particle\n      } = data,\n      diameter = radius * double,\n      pxRatio = particle.container.retina.pixelRatio,\n      currentPos = particle.getPosition();\n    if (!particle.trail || !particle.trailLength) {\n      return;\n    }\n    const pathLength = particle.trailLength + radius;\n    particle.trail.push({\n      color: context.fillStyle ?? context.strokeStyle,\n      position: {\n        x: currentPos.x,\n        y: currentPos.y\n      }\n    });\n    if (particle.trail.length < minTrailLength) {\n      return;\n    }\n    while (particle.trail.length > pathLength) {\n      particle.trail.shift();\n    }\n    const trailLength = Math.min(particle.trail.length, pathLength),\n      offsetPos = {\n        x: currentPos.x,\n        y: currentPos.y\n      },\n      canvasSize = {\n        width: particle.container.canvas.size.width + diameter,\n        height: particle.container.canvas.size.height + diameter\n      };\n    let lastPos = particle.trail[trailLength - trailLengthOffset].position;\n    const defaultTransform = {\n      a: 1,\n      b: 0,\n      c: 0,\n      d: 1\n    };\n    context.setTransform(defaultTransform.a, defaultTransform.b, defaultTransform.c, defaultTransform.d, currentPos.x, currentPos.y);\n    for (let i = trailLength; i > noItems; i--) {\n      const step = particle.trail[i - trailLengthOffset],\n        position = step.position;\n      context.beginPath();\n      context.moveTo(lastPos.x - offsetPos.x, lastPos.y - offsetPos.y);\n      const warp = {\n        x: (lastPos.x + canvasSize.width) % canvasSize.width,\n        y: (lastPos.y + canvasSize.height) % canvasSize.height\n      };\n      if (Math.abs(lastPos.x - position.x) > canvasSize.width * half || Math.abs(lastPos.y - position.y) > canvasSize.height * half) {\n        lastPos = position;\n        continue;\n      }\n      context.lineTo((Math.abs(lastPos.x - position.x) > canvasSize.width * half ? warp.x : position.x) - offsetPos.x, (Math.abs(lastPos.y - position.y) > canvasSize.height * half ? warp.y : position.y) - offsetPos.y);\n      const width = Math.max(i / trailLength * diameter, pxRatio, particle.trailMinWidth ?? minWidth),\n        oldAlpha = context.globalAlpha;\n      context.globalAlpha = particle.trailFade ? i / trailLength : defaultAlpha;\n      context.lineWidth = particle.trailMaxWidth ? Math.min(width, particle.trailMaxWidth) : width;\n      context.strokeStyle = step.color;\n      context.stroke();\n      context.globalAlpha = oldAlpha;\n      lastPos = position;\n    }\n    const {\n      transformData\n    } = data;\n    context.setTransform(transformData.a, transformData.b, transformData.c, transformData.d, currentPos.x, currentPos.y);\n  }\n  particleInit(container, particle) {\n    particle.trail = [];\n    const effectData = particle.effectData;\n    particle.trailFade = effectData?.fade ?? true;\n    particle.trailLength = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(effectData?.length ?? defaultLength) * container.retina.pixelRatio;\n    particle.trailMaxWidth = effectData?.maxWidth ? (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(effectData.maxWidth) * container.retina.pixelRatio : undefined;\n    particle.trailMinWidth = effectData?.minWidth ? (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(effectData.minWidth) * container.retina.pixelRatio : undefined;\n  }\n}\n\n//# sourceURL=webpack://@tsparticles/all/../../effects/trail/dist/browser/TrailDrawer.js?");

/***/ })

}]);