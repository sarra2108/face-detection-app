/*!
 * Author : Matteo Bruni
 * MIT license: https://opensource.org/licenses/MIT
 * Demo / Generator : https://particles.js.org/
 * GitHub : https://www.github.com/matteobruni/tsparticles
 * How to use? : Check the GitHub README
 * v3.3.0
 */
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(this["webpackChunk_tsparticles_all"] = this["webpackChunk_tsparticles_all"] || []).push([["plugins_infection_dist_browser_ParticlesInfecter_js"],{

/***/ "../../plugins/infection/dist/browser/ParticlesInfecter.js":
/*!*****************************************************************!*\
  !*** ../../plugins/infection/dist/browser/ParticlesInfecter.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParticlesInfecter: () => (/* binding */ ParticlesInfecter)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ \"../../engine/dist/browser/index.js\");\n\nconst minStagesCount = 1,\n  double = 2;\nclass ParticlesInfecter extends _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.ParticlesInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n  clear() {}\n  init() {}\n  interact(p1, delta) {\n    const infecter = this.container.infecter;\n    if (!infecter) {\n      return;\n    }\n    infecter.updateInfection(p1, delta.value);\n    if (p1.infection?.stage === undefined) {\n      return;\n    }\n    const container = this.container,\n      options = container.actualOptions,\n      infectionOptions = options.infection;\n    if (!infectionOptions?.enable || infectionOptions.stages.length < minStagesCount) {\n      return;\n    }\n    const infectionStage1 = infectionOptions.stages[p1.infection.stage],\n      pxRatio = container.retina.pixelRatio,\n      radius = p1.getRadius() * double + infectionStage1.radius * pxRatio,\n      pos = p1.getPosition(),\n      infectedStage1 = infectionStage1.infectedStage ?? p1.infection.stage,\n      query = container.particles.quadTree.queryCircle(pos, radius),\n      infections = infectionStage1.rate,\n      neighbors = query.length;\n    for (const p2 of query) {\n      const infP2 = p2;\n      if (infP2 === p1 || infP2.destroyed || infP2.spawning || !(infP2.infection?.stage === undefined || infP2.infection.stage !== p1.infection.stage) || (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRandom)() >= infections / neighbors) {\n        continue;\n      }\n      if (infP2.infection?.stage === undefined) {\n        infecter.startInfection(infP2, infectedStage1);\n      } else if (infP2.infection.stage < p1.infection.stage) {\n        infecter.updateInfectionStage(infP2, infectedStage1);\n      } else if (infP2.infection.stage > p1.infection.stage) {\n        const infectionStage2 = infectionOptions.stages[infP2.infection.stage];\n        const infectedStage2 = infectionStage2?.infectedStage ?? infP2.infection.stage;\n        infecter.updateInfectionStage(p1, infectedStage2);\n      }\n    }\n  }\n  isEnabled() {\n    return this.container.actualOptions?.infection?.enable ?? false;\n  }\n  reset() {}\n}\n\n//# sourceURL=webpack://@tsparticles/all/../../plugins/infection/dist/browser/ParticlesInfecter.js?");

/***/ })

}]);